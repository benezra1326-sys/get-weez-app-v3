// üß† TEST COMPR√âHENSION COMPLEXE
// Objectif : Tester que l'IA comprend les demandes multiples

import { advancedUnderstanding } from './src/lib/advanced-understanding.js'

class TestComprehensionComplexe {
  constructor() {
    this.testResults = {
      totalTests: 0,
      successfulTests: 0,
      failedTests: 0,
      responseTimes: []
    }
  }

  // === TEST COMPLET ===
  async runCompleteTest() {
    console.log('üß† D√âMARRAGE TEST COMPR√âHENSION COMPLEXE')
    console.log('============================================================')
    console.log('üéØ Objectif : Tester la compr√©hension des demandes multiples')
    console.log('üéØ Exemple : "Je veux d√Æner demain avec ma femme et louer un yacht avec DJ"')
    console.log('============================================================\n')

    const testMessages = [
      "Je veux d√Æner demain avec ma femme et louer un yacht avec DJ inclus",
      "Je veux r√©server un restaurant romantique et un yacht pour 8 personnes",
      "Je veux organiser une soir√©e avec DJ et r√©server un restaurant festif",
      "Je veux louer un yacht avec DJ et r√©server un restaurant avec vue sur la mer",
      "Je veux d√Æner en couple et organiser une soir√©e sur yacht avec musique",
      "Je veux r√©server un restaurant √©l√©gant et un yacht de luxe avec DJ",
      "Je veux organiser un √©v√©nement avec yacht, DJ et restaurant gastronomique",
      "Je veux louer un yacht avec DJ et r√©server un restaurant pour un anniversaire",
      "Je veux d√Æner romantique et yacht avec DJ pour c√©l√©brer",
      "Je veux r√©server restaurant et yacht avec DJ pour une soir√©e priv√©e"
    ]

    for (let i = 0; i < testMessages.length; i++) {
      const message = testMessages[i]
      console.log(`\nüìö TEST ${i + 1}/10`)
      console.log(`‚ùì Message: "${message}"`)
      
      await this.testMessage(message, i + 1)
      
      // Pause entre tests
      if (i % 3 === 0) {
        console.log('‚è∏Ô∏è Pause de 1 seconde...')
        await this.sleep(1000)
      }
    }

    // G√©n√©rer rapport final
    this.generateTestReport()
  }

  // === TEST D'UN MESSAGE ===
  async testMessage(message, testNumber) {
    const startTime = Date.now()
    
    try {
      // Analyser le message
      const analysis = advancedUnderstanding.analyzeComplexMessage(message)
      console.log(`  üîç Services d√©tect√©s: ${analysis.services.length}`)
      console.log(`  üîç Personnes: ${analysis.people.join(', ')}`)
      console.log(`  üîç Temps: ${analysis.time.join(', ')}`)
      console.log(`  üîç Pr√©f√©rences: ${analysis.preferences.join(', ')}`)
      console.log(`  üîç Complexe: ${analysis.isComplex}`)
      
      // G√©n√©rer la r√©ponse
      const response = advancedUnderstanding.generateCompleteResponse(message, 'guest')
      
      const responseTime = Date.now() - startTime
      this.testResults.responseTimes.push(responseTime)
      
      if (response.success && analysis.isComplex) {
        this.testResults.successfulTests++
        console.log(`  ‚úÖ Succ√®s (${responseTime}ms)`)
        console.log(`  üìù R√©ponse: ${response.message.substring(0, 150)}...`)
      } else {
        this.testResults.failedTests++
        console.log(`  ‚ùå √âchec (${responseTime}ms)`)
        console.log(`  üìù R√©ponse: ${response.message}`)
      }
      
    } catch (error) {
      this.testResults.failedTests++
      console.log(`  ‚ùå Erreur: ${error.message}`)
    }
    
    this.testResults.totalTests++
  }

  // === G√âN√âRATION DE RAPPORT ===
  generateTestReport() {
    console.log('\n============================================================')
    console.log('üìä RAPPORT DE TEST COMPR√âHENSION COMPLEXE')
    console.log('============================================================')
    console.log(`üìö Tests totaux: ${this.testResults.totalTests}`)
    console.log(`‚úÖ Tests r√©ussis: ${this.testResults.successfulTests}`)
    console.log(`‚ùå Tests √©chou√©s: ${this.testResults.failedTests}`)
    console.log(`üìà Taux de succ√®s: ${((this.testResults.successfulTests / this.testResults.totalTests) * 100).toFixed(2)}%`)
    
    if (this.testResults.responseTimes.length > 0) {
      const avgResponseTime = this.testResults.responseTimes.reduce((a, b) => a + b, 0) / this.testResults.responseTimes.length
      console.log(`‚ö° Temps de r√©ponse moyen: ${avgResponseTime.toFixed(2)}ms`)
    }
    
    console.log('============================================================')
    
    // Recommandations
    this.generateRecommendations()
  }

  // === G√âN√âRATION DE RECOMMANDATIONS ===
  generateRecommendations() {
    console.log('\nüéØ RECOMMANDATIONS:')
    
    if (this.testResults.successfulTests / this.testResults.totalTests < 0.8) {
      console.log('üîß Am√©liorer la d√©tection des demandes multiples')
    }
    
    if (this.testResults.responseTimes.length > 0) {
      const avgResponseTime = this.testResults.responseTimes.reduce((a, b) => a + b, 0) / this.testResults.responseTimes.length
      if (avgResponseTime > 1000) {
        console.log('‚ö° Optimiser les temps de r√©ponse')
      }
    }
    
    console.log('\nüöÄ L\'IA peut maintenant comprendre les demandes complexes !')
    console.log('üéØ Exemple : "D√Æner + Yacht + DJ" ‚Üí R√©ponse compl√®te')
  }

  // === UTILITAIRE SLEEP ===
  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms))
  }
}

// === EX√âCUTION DU TEST ===
const testeur = new TestComprehensionComplexe()
testeur.runCompleteTest()
