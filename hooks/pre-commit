#!/bin/bash

# 🔧 PRE-COMMIT HOOK - GET WEEZ
# Ce hook s'exécute avant chaque commit pour vérifier la qualité du code

set -e

echo "🔍 Pre-commit hook - Vérification du code..."

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour les messages colorés
print_step() {
    echo -e "${BLUE}📋 $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# 1. Vérifier que les fichiers modifiés sont bien formatés
print_step "Vérification des fichiers modifiés..."

# Obtenir la liste des fichiers modifiés (JavaScript/TypeScript seulement)
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(js|jsx|ts|tsx)$' || true)

if [ -n "$STAGED_FILES" ]; then
    print_step "Fichiers JavaScript/TypeScript modifiés détectés"
    
    # 2. Linting avec ESLint
    print_step "Exécution de ESLint..."
    if command -v npx &> /dev/null; then
        for FILE in $STAGED_FILES; do
            if [ -f "$FILE" ]; then
                npx eslint "$FILE" --fix || {
                    print_error "ESLint a trouvé des erreurs dans $FILE"
                    echo "Corrigez les erreurs avant de commiter"
                    exit 1
                }
            fi
        done
        print_success "ESLint passed"
    else
        print_warning "ESLint non disponible, passage de cette vérification"
    fi

    # 3. Vérification de la syntaxe JavaScript/TypeScript
    print_step "Vérification de la syntaxe..."
    for FILE in $STAGED_FILES; do
        if [ -f "$FILE" ]; then
            # Vérifier la syntaxe avec Node.js
            if [[ "$FILE" == *.js || "$FILE" == *.jsx ]]; then
                node -c "$FILE" || {
                    print_error "Erreur de syntaxe JavaScript dans $FILE"
                    exit 1
                }
            fi
        fi
    done
    print_success "Syntaxe JavaScript validée"
fi

# 4. Vérifier que les secrets ne sont pas commitées
print_step "Vérification des secrets..."
SECRET_PATTERNS=(
    "OPENAI_API_KEY"
    "SUPABASE_SERVICE_ROLE_KEY" 
    "password"
    "secret"
    "private_key"
    "api_key"
    "token"
)

for PATTERN in "${SECRET_PATTERNS[@]}"; do
    if git diff --cached --name-only | xargs grep -l "$PATTERN" 2>/dev/null | grep -v ".env.example" | grep -v ".gitignore"; then
        print_error "Possible secret détecté avec le pattern: $PATTERN"
        print_error "Vérifiez que vous ne commitez pas de données sensibles"
        exit 1
    fi
done
print_success "Aucun secret détecté"

# 5. Vérification de la taille des fichiers
print_step "Vérification de la taille des fichiers..."
MAX_SIZE=1048576  # 1MB en bytes
LARGE_FILES=$(git diff --cached --name-only | xargs ls -la 2>/dev/null | awk -v max=$MAX_SIZE '$5 > max {print $9, $5}' || true)

if [ -n "$LARGE_FILES" ]; then
    print_warning "Fichiers volumineux détectés:"
    echo "$LARGE_FILES"
    print_warning "Considérez utiliser Git LFS pour les gros fichiers"
fi

# 6. Test de build rapide (optionnel - commenté par défaut car peut être long)
# print_step "Test de build rapide..."
# npm run build > /dev/null 2>&1 || {
#     print_error "Le build a échoué"
#     exit 1
# }
# print_success "Build test réussi"

print_success "Toutes les vérifications pre-commit sont passées !"
echo -e "${GREEN}🚀 Commit autorisé${NC}"

exit 0