import fs from "fs"
import chalk from "chalk"

export async function generateAgentImprovements(audit, intelligence) {
  console.log(chalk.yellow("\nðŸ”§ GÃ©nÃ©ration du plan d'amÃ©lioration de l'agent..."))

  const avg = audit.summary.averageScores
  const lowPrecision = avg.precision < 70
  const lowContext = avg.contextUnderstanding < 75
  const lowTone = avg.tone < 85

  const improvements = []

  if (lowContext)
    improvements.push({
      action: "Optimiser le moteur de dÃ©tection d'intentions (LLM + contexte Supabase)",
      reason: "Mauvaise comprÃ©hension conversationnelle",
      priority: "CRITICAL",
      implementation: "Enrichir les prompts avec plus d'exemples contextuels et amÃ©liorer la classification sÃ©mantique"
    })

  if (lowPrecision)
    improvements.push({
      action: "Renforcer les rÃ©ponses avec donnÃ©es Supabase (prix, lieux, horaires)",
      reason: "Manque de prÃ©cision des rÃ©ponses",
      priority: "HIGH",
      implementation: "Structurer les rÃ©ponses avec des templates et inclure systÃ©matiquement des dÃ©tails concrets"
    })

  if (lowTone)
    improvements.push({
      action: "Ajouter filtre ton Gliitz (Ã©lÃ©gant, empathique, luxueux)",
      reason: "Ton incohÃ©rent avec la marque",
      priority: "MEDIUM",
      implementation: "CrÃ©er des templates de rÃ©ponse avec le ton Gliitz et valider la cohÃ©rence"
    })

  // Analyser les rÃ©sultats d'intelligence pour des amÃ©liorations spÃ©cifiques
  if (intelligence && intelligence.categoryScores) {
    Object.entries(intelligence.categoryScores).forEach(([category, score]) => {
      if (score < 70) {
        improvements.push({
          action: `AmÃ©liorer ${category.toLowerCase()}`,
          reason: `Score insuffisant: ${score}/100`,
          priority: "MEDIUM",
          implementation: `DÃ©velopper des algorithmes spÃ©cialisÃ©s pour ${category.toLowerCase()}`
        })
      }
    })
  }

  // Nouveau prompt systÃ¨me basÃ© sur les observations
  const newPrompt = `Tu es Gliitz, l'assistant de conciergerie de luxe pour Marbella et ses environs.

IDENTITÃ‰ ET TON :
- PersonnalitÃ© : Ã‰lÃ©gant, attentionnÃ©, proactif, bienveillant
- Style : Luxueux sans Ãªtre prÃ©tentieux, empathique, crÃ©atif
- Communication : StructurÃ©e, dÃ©taillÃ©e, avec emojis appropriÃ©s

MISSIONS PRINCIPALES :
1. Comprendre parfaitement le contexte utilisateur (Ã©motions, prÃ©fÃ©rences, contraintes)
2. Utiliser la gÃ©olocalisation et les prÃ©fÃ©rences stockÃ©es dans Supabase
3. RÃ©pondre de maniÃ¨re structurÃ©e avec titres, puces et emojis
4. Toujours proposer 3 options concrÃ¨tes + un conseil personnalisÃ©
5. Ne jamais confondre Ã©vÃ©nements passÃ©s et Ã  venir
6. Maintenir la cohÃ©rence conversationnelle entre les messages

STRUCTURE DE RÃ‰PONSE :
- Titre principal avec emoji
- 3 options dÃ©taillÃ©es avec **gras** et emojis
- Informations pratiques (prix, horaires, localisation)
- Conseil personnalisÃ© selon le contexte
- Ton chaleureux et professionnel

EXEMPLES DE CONTEXTE :
- Anniversaire â†’ CÃ©lÃ©bration, romantique, spÃ©cial
- Stress â†’ Relaxation, spa, bien-Ãªtre
- Business â†’ Professionnel, Ã©lÃ©gant, impressionnant
- Famille â†’ AdaptÃ© enfants, sÃ©curisÃ©, convivial

NE JAMAIS :
- Proposer des services inappropriÃ©s au contexte
- Oublier les prÃ©fÃ©rences mentionnÃ©es prÃ©cÃ©demment
- Donner des informations imprÃ©cises ou vagues
- Perdre le fil de la conversation`

  // GÃ©nÃ©rer le plan d'amÃ©lioration dÃ©taillÃ©
  const improvementPlan = `# Plan d'AmÃ©lioration Gliitz Chat

## ðŸŽ¯ Objectifs Prioritaires

### Actions ImmÃ©diates (1-2 semaines)
${improvements.filter(i => i.priority === 'CRITICAL').map(i => 
  `- **${i.action}**\n  Raison: ${i.reason}\n  ImplÃ©mentation: ${i.implementation}`
).join('\n\n')}

### Actions Importantes (2-4 semaines)
${improvements.filter(i => i.priority === 'HIGH').map(i => 
  `- **${i.action}**\n  Raison: ${i.reason}\n  ImplÃ©mentation: ${i.implementation}`
).join('\n\n')}

### Actions Moyennes (1-2 mois)
${improvements.filter(i => i.priority === 'MEDIUM').map(i => 
  `- **${i.action}**\n  Raison: ${i.reason}\n  ImplÃ©mentation: ${i.implementation}`
).join('\n\n')}

## ðŸ“Š MÃ©triques de SuccÃ¨s

### Objectifs Ã  Court Terme
- [ ] Score de comprÃ©hension contextuelle > 85/100
- [ ] Score de prÃ©cision > 80/100
- [ ] Score de ton > 90/100
- [ ] RÃ©duction des erreurs de 50%

### Objectifs Ã  Moyen Terme
- [ ] Taux de succÃ¨s global > 90%
- [ ] Personnalisation avancÃ©e fonctionnelle
- [ ] Intelligence Ã©motionnelle opÃ©rationnelle
- [ ] GÃ©olocalisation prÃ©cise

## ðŸ”§ ImplÃ©mentation Technique

### 1. AmÃ©lioration des Prompts
- Enrichir la base d'exemples contextuels
- Ajouter des patterns de dÃ©tection Ã©motionnelle
- ImplÃ©menter la mÃ©moire conversationnelle

### 2. Optimisation des RÃ©ponses
- CrÃ©er des templates structurÃ©s
- IntÃ©grer systÃ©matiquement les donnÃ©es Supabase
- Valider la cohÃ©rence du ton

### 3. Tests et Validation
- Tests automatisÃ©s sur 1000 conversations
- Validation manuelle des cas complexes
- Monitoring continu des performances

*GÃ©nÃ©rÃ© automatiquement le ${new Date().toLocaleString('fr-FR')}*`

  // Sauvegarder les fichiers
  fs.writeFileSync("improve-agent-actions.md", improvementPlan)
  fs.writeFileSync("updated-system-prompt.txt", newPrompt)

  console.log(chalk.green("âœ… AmÃ©liorations gÃ©nÃ©rÃ©es :"))
  console.log(" - improve-agent-actions.md")
  console.log(" - updated-system-prompt.txt")
  
  // Afficher le rÃ©sumÃ©
  console.log(chalk.cyan("\nðŸ“‹ RÃ©sumÃ© des amÃ©liorations :"))
  improvements.forEach(imp => {
    const color = imp.priority === 'CRITICAL' ? 'red' : 
                  imp.priority === 'HIGH' ? 'yellow' : 'white'
    console.log(chalk[color](`  [${imp.priority}] ${imp.action}`))
  })
}


