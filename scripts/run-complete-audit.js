#!/usr/bin/env node

/**
 * Script principal pour ex√©cuter le test d'audit complet de Gliitz Chat
 * 
 * Ce script :
 * 1. Lance le test de simulation de 1000 conversations
 * 2. Analyse les r√©sultats d√©taill√©s
 * 3. G√©n√®re un rapport final avec recommandations
 */

const { runChatAuditTest } = require('./gliitz-chat-audit-test')
const { analyzeAuditResults } = require('./analyze-audit-results')
const fs = require('fs')
const path = require('path')

async function runCompleteAudit() {
  console.log('üöÄ GLIITZ CHAT - TEST D\'AUDIT COMPLET')
  console.log('=' * 50)
  console.log('üìä Simulation de 1000 conversations vari√©es')
  console.log('üîç Analyse des performances et coh√©rence')
  console.log('üìÑ G√©n√©ration de rapports d√©taill√©s')
  console.log('')

  const startTime = Date.now()

  try {
    // Phase 1: Ex√©cuter le test de simulation
    console.log('üìã PHASE 1: Simulation des conversations...')
    console.log('-' * 40)
    await runChatAuditTest()
    
    // Phase 2: Analyser les r√©sultats
    console.log('\nüìã PHASE 2: Analyse des r√©sultats...')
    console.log('-' * 40)
    analyzeAuditResults()
    
    // Phase 3: G√©n√©rer le rapport final
    console.log('\nüìã PHASE 3: G√©n√©ration du rapport final...')
    console.log('-' * 40)
    generateFinalReport()
    
    const duration = Math.round((Date.now() - startTime) / 1000)
    console.log(`\nüéâ Test d'audit complet termin√© en ${duration} secondes`)
    console.log('\nüìÅ Fichiers g√©n√©r√©s :')
    console.log('  ‚Ä¢ audit-results.json - R√©sultats bruts du test')
    console.log('  ‚Ä¢ audit-analysis.json - Analyse d√©taill√©e')
    console.log('  ‚Ä¢ final-audit-report.md - Rapport final lisible')
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors du test d\'audit :', error)
    process.exit(1)
  }
}

function generateFinalReport() {
  console.log('üìù G√©n√©ration du rapport final...')
  
  // Lire les donn√©es d'analyse
  let analysis
  try {
    analysis = JSON.parse(fs.readFileSync('audit-analysis.json', 'utf8'))
  } catch (error) {
    console.error('‚ùå Impossible de lire les r√©sultats d\'analyse')
    return
  }

  const { analysis: data } = analysis
  
  // G√©n√©rer le rapport Markdown
  const report = `# Rapport d'Audit Gliitz Chat

## üìä R√©sum√© Ex√©cutif

**√âtat g√©n√©ral :** ${data.executiveSummary.overallHealth}
**Date du test :** ${new Date().toLocaleDateString('fr-FR')}

### Points Forts
${data.executiveSummary.keyStrengths.map(strength => `- ${strength}`).join('\n')}

### Probl√®mes Critiques
${data.executiveSummary.criticalIssues.map(issue => `- ${issue}`).join('\n')}

---

## üìà Analyse de Performance

### Scores Moyens
- **Pertinence :** ${data.executiveSummary.overallHealth === 'EXCELLENT' ? '‚úÖ Excellent' : '‚ö†Ô∏è √Ä am√©liorer'}
- **Compr√©hension contextuelle :** ${data.contextAnalysis.averageContextScore}/100
- **Coh√©rence du ton :** ${data.toneAnalysis.averageToneScore}/100
- **Pr√©cision des r√©ponses :** ${data.executiveSummary.overallHealth === 'EXCELLENT' ? '‚úÖ Bon' : '‚ö†Ô∏è Insuffisant'}

### Topics les Mieux Performants
${data.performanceAnalysis.bestPerformingTopics.map(topic => `- ${topic}`).join('\n')}

### Topics √† Am√©liorer
${data.performanceAnalysis.worstPerformingTopics.map(topic => `- ${topic}`).join('\n')}

---

## üîç Analyse des Probl√®mes

### Probl√®mes les Plus Fr√©quents
${Object.entries(data.issueAnalysis.issueCategories).slice(0, 5).map(([issue, details]) => 
  `- **${issue}** : ${details.description} (Impact: ${details.impact})`
).join('\n')}

### Solutions Recommand√©es
${data.issueAnalysis.criticalIssues.map(issue => 
  `- **${issue.issue}** : ${issue.category.solutions[0]}`
).join('\n')}

---

## üí° Recommandations Prioritaires

### Actions Imm√©diates
${data.recommendations.immediate.map(rec => 
  `- **[${rec.priority}]** ${rec.action}\n  ${rec.description}`
).join('\n')}

### Actions √† Court Terme
${data.recommendations.shortTerm.map(rec => 
  `- **[${rec.priority}]** ${rec.action}`
).join('\n')}

### Actions √† Long Terme
${data.recommendations.longTerm.map(rec => 
  `- **[${rec.priority}]** ${rec.action}`
).join('\n')}

---

## üéØ Plan d'Action D√©taill√©

### Phase 1 - Corrections Critiques (1-2 semaines)
**Objectifs :**
${data.actionPlan.phase1.objectives.map(obj => `- ${obj}`).join('\n')}

**T√¢ches :**
${data.actionPlan.phase1.tasks.map(task => `- ${task}`).join('\n')}

### Phase 2 - Am√©liorations (3-4 semaines)
**Objectifs :**
${data.actionPlan.phase2.objectives.map(obj => `- ${obj}`).join('\n')}

**T√¢ches :**
${data.actionPlan.phase2.tasks.map(task => `- ${task}`).join('\n')}

### Phase 3 - Optimisation (2-3 mois)
**Objectifs :**
${data.actionPlan.phase3.objectives.map(obj => `- ${obj}`).join('\n')}

**T√¢ches :**
${data.actionPlan.phase3.tasks.map(task => `- ${task}`).join('\n')}

---

## üìã Exemples de Conversations

### Conversation R√©ussie
\`\`\`
Utilisateur: "Je veux organiser un anniversaire surprise pour ma femme"
Gliitz: "Pour un anniversaire inoubliable, voici mes recommandations :

**Restaurant Gastronomique**
D√Æner aux chandelles avec vue sur mer üçΩÔ∏è

**Soir√©e Priv√©e**
DJ et bar √† cocktails personnalis√© üéâ

**Service Surprise**
Photographe pour immortaliser l'instant üì∏"
\`\`\`

### Conversation √† Am√©liorer
\`\`\`
Utilisateur: "Quels services pour un anniversaire ?"
Gliitz: "Voici quelques services :

**Organisation √âv√©nements**
Cr√©ation d'une f√™te sur mesure üéâ

**Chef √† Domicile**
Un chef √©toil√© Michelin üçΩÔ∏è

**Baby-sitting VIP**
Nounous multilingues üë∂"
\`\`\`

---

## üîß Recommandations Techniques

### Am√©lioration de la Compr√©hension Contextuelle
1. **Enrichir les prompts de classification**
   - Ajouter plus d'exemples de contexte
   - Am√©liorer la d√©tection d'intentions implicites

2. **Structurer les r√©ponses**
   - Cr√©er des templates standardis√©s
   - Inclure syst√©matiquement des d√©tails concrets

3. **Gestion des conversations multi-tours**
   - Impl√©menter une m√©moire conversationnelle
   - Maintenir le contexte entre les messages

### Optimisation des Performances
1. **Base de connaissances**
   - Ajouter plus de vari√©t√© dans les suggestions
   - Int√©grer de nouveaux services et √©tablissements

2. **Personnalisation**
   - Adapter les r√©ponses aux pr√©f√©rences utilisateur
   - Apprentissage des patterns de conversation

3. **Monitoring continu**
   - Analytics des conversations
   - D√©tection automatique des probl√®mes

---

## üìä M√©triques de Succ√®s

### Objectifs √† Court Terme (1 mois)
- [ ] Taux de succ√®s global > 85%
- [ ] Score de compr√©hension contextuelle > 85/100
- [ ] Score de pr√©cision > 80/100
- [ ] R√©duction des probl√®mes critiques de 50%

### Objectifs √† Moyen Terme (3 mois)
- [ ] Taux de succ√®s global > 90%
- [ ] Personnalisation basique impl√©ment√©e
- [ ] Support multi-langues fonctionnel
- [ ] Analytics avanc√©s en place

### Objectifs √† Long Terme (6 mois)
- [ ] Taux de succ√®s global > 95%
- [ ] IA conversationnelle avanc√©e
- [ ] Int√©gration compl√®te avec tous les services
- [ ] Syst√®me d'apprentissage automatique

---

*Rapport g√©n√©r√© automatiquement par le syst√®me d'audit Gliitz Chat*
*Date : ${new Date().toLocaleString('fr-FR')}*
`

  // Sauvegarder le rapport
  fs.writeFileSync('final-audit-report.md', report)
  console.log('‚úÖ Rapport final g√©n√©r√© : final-audit-report.md')
}

// Fonction pour afficher l'aide
function showHelp() {
  console.log(`
üöÄ GLIITZ CHAT - TEST D'AUDIT COMPLET

Usage: node scripts/run-complete-audit.js [options]

Options:
  --help, -h          Afficher cette aide
  --quick             Test rapide avec 100 conversations seulement
  --verbose           Mode verbeux avec plus de d√©tails

Exemples:
  node scripts/run-complete-audit.js
  node scripts/run-complete-audit.js --quick
  node scripts/run-complete-audit.js --verbose

Description:
  Ce script ex√©cute un test d'audit complet du chatbot Gliitz en simulant
  1000 conversations vari√©es et en analysant les performances pour identifier
  les points d'am√©lioration et g√©n√©rer des recommandations.

Fichiers g√©n√©r√©s:
  ‚Ä¢ audit-results.json     - R√©sultats bruts du test
  ‚Ä¢ audit-analysis.json    - Analyse d√©taill√©e des performances
  ‚Ä¢ final-audit-report.md  - Rapport final lisible en Markdown
`)
}

// Gestion des arguments de ligne de commande
const args = process.argv.slice(2)

if (args.includes('--help') || args.includes('-h')) {
  showHelp()
  process.exit(0)
}

if (args.includes('--quick')) {
  console.log('‚ö° Mode rapide activ√© (100 conversations)')
  // Modifier la constante dans gliitz-chat-audit-test.js si n√©cessaire
}

if (args.includes('--verbose')) {
  console.log('üîç Mode verbeux activ√©')
  // Activer des logs plus d√©taill√©s
}

// Lancer le test complet
if (require.main === module) {
  runCompleteAudit()
}

module.exports = { runCompleteAudit }


