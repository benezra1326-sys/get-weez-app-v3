// Script pour configurer le compte avishay@outlook.fr
// Ce script crée les données nécessaires pour l'authentification

console.log('🔧 Configuration du compte avishay@outlook.fr')
console.log('=' * 50)

// Informations du compte à créer
const userAccount = {
  email: 'avishay@outlook.fr',
  password: 'admin123456',
  first_name: 'Avishay',
  last_name: 'Admin',
  role: 'admin',
  is_member: true
}

console.log('📋 Informations du compte:')
console.log(`   📧 Email: ${userAccount.email}`)
console.log(`   🔑 Mot de passe: ${userAccount.password}`)
console.log(`   👤 Nom: ${userAccount.first_name} ${userAccount.last_name}`)
console.log(`   🎭 Rôle: ${userAccount.role}`)
console.log(`   ⭐ Membre: ${userAccount.is_member ? 'Oui' : 'Non'}`)

console.log('\n📝 Instructions pour configurer Supabase:')
console.log('1. Allez sur https://supabase.com')
console.log('2. Créez un nouveau projet ou utilisez un projet existant')
console.log('3. Copiez l\'URL et la clé anonyme')
console.log('4. Créez le fichier .env.local avec:')
console.log('')
console.log('   NEXT_PUBLIC_SUPABASE_URL=votre_url_supabase')
console.log('   NEXT_PUBLIC_SUPABASE_ANON_KEY=votre_cle_supabase')
console.log('')

console.log('📋 Script SQL pour créer l\'utilisateur dans Supabase:')
console.log('-- Exécutez ce script dans l\'éditeur SQL de Supabase')
console.log('')
console.log('-- 1. Activer l\'authentification par email')
console.log('-- Dans Authentication > Settings > Auth')
console.log('-- Désactiver "Enable email confirmations" temporairement')
console.log('')
console.log('-- 2. Créer l\'utilisateur via l\'interface ou SQL:')
console.log(`INSERT INTO auth.users (`)
console.log(`  instance_id,`)
console.log(`  id,`)
console.log(`  aud,`)
console.log(`  role,`)
console.log(`  email,`)
console.log(`  encrypted_password,`)
console.log(`  email_confirmed_at,`)
console.log(`  invited_at,`)
console.log(`  confirmation_token,`)
console.log(`  confirmation_sent_at,`)
console.log(`  recovery_token,`)
console.log(`  recovery_sent_at,`)
console.log(`  email_change_token_new,`)
console.log(`  email_change,`)
console.log(`  email_change_sent_at,`)
console.log(`  last_sign_in_at,`)
console.log(`  raw_app_meta_data,`)
console.log(`  raw_user_meta_data,`)
console.log(`  is_super_admin,`)
console.log(`  created_at,`)
console.log(`  updated_at,`)
console.log(`  phone,`)
console.log(`  phone_confirmed_at,`)
console.log(`  phone_change,`)
console.log(`  phone_change_token,`)
console.log(`  phone_change_sent_at,`)
console.log(`  confirmed_at,`)
console.log(`  email_change_token_current,`)
console.log(`  email_change_confirm_status,`)
console.log(`  banned_until,`)
console.log(`  reauthentication_token,`)
console.log(`  reauthentication_sent_at,`)
console.log(`  is_sso_user,`)
console.log(`  deleted_at`)
console.log(`) VALUES (`)
console.log(`  '00000000-0000-0000-0000-000000000000',`)
console.log(`  gen_random_uuid(),`)
console.log(`  'authenticated',`)
console.log(`  'authenticated',`)
console.log(`  '${userAccount.email}',`)
console.log(`  crypt('${userAccount.password}', gen_salt('bf')),`)
console.log(`  NOW(),`)
console.log(`  NOW(),`)
console.log(`  '',`)
console.log(`  NOW(),`)
console.log(`  '',`)
console.log(`  NOW(),`)
console.log(`  '',`)
console.log(`  '',`)
console.log(`  NOW(),`)
console.log(`  NOW(),`)
console.log(`  '{"provider": "email", "providers": ["email"]}',`)
console.log(`  '{"first_name": "${userAccount.first_name}", "last_name": "${userAccount.last_name}", "role": "${userAccount.role}"}',`)
console.log(`  false,`)
console.log(`  NOW(),`)
console.log(`  NOW(),`)
console.log(`  NULL,`)
console.log(`  NULL,`)
console.log(`  '',`)
console.log(`  '',`)
console.log(`  NOW(),`)
console.log(`  NOW(),`)
console.log(`  '',`)
console.log(`  0,`)
console.log(`  NULL,`)
console.log(`  '',`)
console.log(`  NOW(),`)
console.log(`  false,`)
console.log(`  NULL`)
console.log(`);`)
console.log('')

console.log('-- 3. Insérer dans la table users (si elle existe):')
console.log(`INSERT INTO users (`)
console.log(`  id,`)
console.log(`  first_name,`)
console.log(`  last_name,`)
console.log(`  email,`)
console.log(`  role,`)
console.log(`  is_member,`)
console.log(`  created_at,`)
console.log(`  updated_at`)
console.log(`) VALUES (`)
console.log(`  (SELECT id FROM auth.users WHERE email = '${userAccount.email}'),`)
console.log(`  '${userAccount.first_name}',`)
console.log(`  '${userAccount.last_name}',`)
console.log(`  '${userAccount.email}',`)
console.log(`  '${userAccount.role}',`)
console.log(`  ${userAccount.is_member},`)
console.log(`  NOW(),`)
console.log(`  NOW()`)
console.log(`);`)

console.log('\n🎯 Méthode alternative - Via l\'interface Supabase:')
console.log('1. Allez dans Authentication > Users')
console.log('2. Cliquez sur "Add user"')
console.log('3. Remplissez les informations:')
console.log(`   - Email: ${userAccount.email}`)
console.log(`   - Password: ${userAccount.password}`)
console.log(`   - First Name: ${userAccount.first_name}`)
console.log(`   - Last Name: ${userAccount.last_name}`)
console.log('4. Créez l\'utilisateur')
console.log('5. Dans la table users, ajoutez une ligne avec les mêmes informations')

console.log('\n✅ Une fois configuré, l\'utilisateur pourra se connecter avec:')
console.log(`   📧 Email: ${userAccount.email}`)
console.log(`   🔑 Mot de passe: ${userAccount.password}`)

console.log('\n🔧 Pour tester la connexion:')
console.log('1. Assurez-vous que Supabase est configuré dans .env.local')
console.log('2. Lancez l\'application: npm run dev')
console.log('3. Allez sur /login')
console.log('4. Utilisez les identifiants ci-dessus')
