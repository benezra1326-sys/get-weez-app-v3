import fs from 'fs'
import path from 'path'

/**
 * Analyseur des r√©sultats du test d'audit Gliitz Chat
 * G√©n√®re des insights d√©taill√©s et des recommandations d'am√©lioration
 */

function analyzeAuditResults() {
  console.log('üîç Analyse des r√©sultats du test d\'audit Gliitz Chat...\n')

  // Lire le fichier de r√©sultats
  let results
  try {
    const resultsPath = path.join(__dirname, '..', 'audit-results.json')
    results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'))
  } catch (error) {
    console.error('‚ùå Impossible de lire le fichier audit-results.json')
    console.error('Assurez-vous d\'avoir ex√©cut√© le test d\'audit d\'abord.')
    return
  }

  // Analyse d√©taill√©e
  const analysis = {
    executiveSummary: generateExecutiveSummary(results),
    performanceAnalysis: analyzePerformance(results),
    contextAnalysis: analyzeContextUnderstanding(results),
    toneAnalysis: analyzeToneConsistency(results),
    issueAnalysis: analyzeIssues(results),
    recommendations: generateRecommendations(results),
    actionPlan: generateActionPlan(results)
  }

  // G√©n√©rer le rapport d'analyse
  generateAnalysisReport(analysis)
  
  // Afficher le r√©sum√©
  displayAnalysisSummary(analysis)
}

function generateExecutiveSummary(results) {
  const { summary } = results
  
  return {
    overallHealth: summary.globalSuccessRate >= 80 ? 'EXCELLENT' : 
                  summary.globalSuccessRate >= 70 ? 'GOOD' :
                  summary.globalSuccessRate >= 60 ? 'NEEDS_IMPROVEMENT' : 'CRITICAL',
    keyStrengths: [
      `Taux de succ√®s global de ${summary.globalSuccessRate}`,
      `Score de ton coh√©rent (${summary.averageScores.tone}/100)`,
      `Cr√©ativit√© √©lev√©e (${summary.averageScores.creativity}/100)`
    ],
    criticalIssues: [
      summary.averageScores.precision < 75 ? 'Pr√©cision des r√©ponses √† am√©liorer' : null,
      summary.averageScores.contextUnderstanding < 80 ? 'Compr√©hension contextuelle insuffisante' : null,
      summary.averageScores.adaptability < 70 ? 'Adaptabilit√© conversationnelle limit√©e' : null
    ].filter(Boolean),
    priorityActions: [
      'Renforcer la d√©tection de contexte',
      'Structurer les r√©ponses avec plus de d√©tails',
      'Am√©liorer la gestion des conversations multi-tours'
    ]
  }
}

function analyzePerformance(results) {
  const { topicPerformance, userTypePerformance } = results.detailedAnalysis
  
  // Analyser les performances par topic
  const topicAnalysis = Object.entries(topicPerformance)
    .map(([topic, score]) => ({
      topic,
      score,
      performance: score >= 85 ? 'EXCELLENT' : 
                  score >= 75 ? 'GOOD' : 
                  score >= 65 ? 'AVERAGE' : 'POOR',
      recommendations: generateTopicRecommendations(topic, score)
    }))
    .sort((a, b) => b.score - a.score)

  // Analyser les performances par type d'utilisateur
  const userTypeAnalysis = Object.entries(userTypePerformance)
    .map(([userType, score]) => ({
      userType,
      score,
      performance: score >= 85 ? 'EXCELLENT' : 
                  score >= 75 ? 'GOOD' : 
                  score >= 65 ? 'AVERAGE' : 'POOR'
    }))
    .sort((a, b) => b.score - a.score)

  return {
    topicAnalysis,
    userTypeAnalysis,
    bestPerformingTopics: topicAnalysis.filter(t => t.performance === 'EXCELLENT').map(t => t.topic),
    worstPerformingTopics: topicAnalysis.filter(t => t.performance === 'POOR').map(t => t.topic),
    bestUserTypes: userTypeAnalysis.filter(u => u.performance === 'EXCELLENT').map(u => u.userType),
    challengingUserTypes: userTypeAnalysis.filter(u => u.performance === 'POOR').map(u => u.userType)
  }
}

function generateTopicRecommendations(topic, score) {
  const recommendations = {
    anniversaire_celebration: [
      'Ajouter plus de vari√©t√© dans les suggestions d\'anniversaire',
      'Inclure des options pour diff√©rents budgets',
      'Proposer des services de d√©coration et animation'
    ],
    dinner_romantic: [
      'Enrichir la base de restaurants romantiques',
      'Ajouter des d√©tails sur l\'ambiance et l\'√©clairage',
      'Inclure des options de menu d√©gustation'
    ],
    boundary_testing: [
      'Renforcer les r√©ponses de limitation √©thique',
      'Rediriger vers des services appropri√©s',
      'Maintenir un ton professionnel'
    ],
    casual_chat: [
      'Am√©liorer les r√©ponses conversationnelles',
      'Ajouter plus de personnalit√©',
      'Inclure des informations locales utiles'
    ]
  }

  if (score < 70) {
    return [
      'Score faible d√©tect√© - n√©cessite une attention particuli√®re',
      'Revoir les prompts et la logique de r√©ponse',
      ...(recommendations[topic] || ['Analyser les patterns de conversation'])
    ]
  }

  return recommendations[topic] || ['Maintenir les bonnes performances']
}

function analyzeContextUnderstanding(results) {
  const { conversationExamples } = results.detailedAnalysis
  
  // Analyser les exemples de conversation
  const contextIssues = []
  const contextSuccesses = []

  conversationExamples.forEach(example => {
    if (example.evaluation.contextUnderstanding < 70) {
      contextIssues.push({
        topic: example.topic,
        userType: example.userType,
        score: example.evaluation.contextUnderstanding,
        conversation: example.conversation.slice(0, 2) // Premier √©change
      })
    } else {
      contextSuccesses.push({
        topic: example.topic,
        score: example.evaluation.contextUnderstanding
      })
    }
  })

  return {
    averageContextScore: results.summary.averageScores.contextUnderstanding,
    contextIssues,
    contextSuccesses,
    improvementAreas: [
      'D√©tection d\'intentions implicites',
      'Compr√©hension des nuances √©motionnelles',
      'Gestion des changements de sujet'
    ]
  }
}

function analyzeToneConsistency(results) {
  const { conversationExamples } = results.detailedAnalysis
  
  // Analyser la coh√©rence du ton
  const toneAnalysis = conversationExamples.map(example => ({
    topic: example.topic,
    toneScore: example.evaluation.tone,
    hasEmojis: example.conversation.some(msg => 
      msg.role === 'assistant' && /[\u{1F300}-\u{1F5FF}\u{1F600}-\u{1F64F}\u{1F680}-\u{1F6FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]/u.test(msg.content)
    ),
    hasStructure: example.conversation.some(msg => 
      msg.role === 'assistant' && (msg.content.includes('**') || msg.content.includes('‚Ä¢'))
    )
  }))

  return {
    averageToneScore: results.summary.averageScores.tone,
    emojiUsage: toneAnalysis.filter(t => t.hasEmojis).length / toneAnalysis.length * 100,
    structuredResponses: toneAnalysis.filter(t => t.hasStructure).length / toneAnalysis.length * 100,
    recommendations: [
      'Maintenir l\'usage des emojis pour le ton Gliitz',
      'Structurer syst√©matiquement les r√©ponses',
      'Garder un ton bienveillant et luxueux'
    ]
  }
}

function analyzeIssues(results) {
  const { commonIssues } = results.summary
  
  const issueCategories = {
    LOW_RELEVANCE: {
      description: 'R√©ponses non pertinentes au contexte',
      impact: 'HIGH',
      solutions: [
        'Am√©liorer la d√©tection de contexte',
        'Enrichir la base de connaissances',
        'Affiner les prompts de classification'
      ]
    },
    CONTEXT_MISUNDERSTANDING: {
      description: 'Mauvaise compr√©hension du contexte',
      impact: 'HIGH',
      solutions: [
        'Renforcer l\'analyse s√©mantique',
        'Ajouter des exemples de contexte',
        'Am√©liorer la formation des mod√®les'
      ]
    },
    TONE_INCONSISTENCY: {
      description: 'Incoh√©rence dans le ton',
      impact: 'MEDIUM',
      solutions: [
        'Standardiser le style de r√©ponse',
        'Ajouter des templates de ton',
        'Former sur l\'identit√© Gliitz'
      ]
    },
    LOW_PRECISION: {
      description: 'Manque de d√©tails dans les r√©ponses',
      impact: 'MEDIUM',
      solutions: [
        'Structurer les r√©ponses avec des d√©tails',
        'Ajouter des informations concr√®tes',
        'Inclure des donn√©es sp√©cifiques'
      ]
    },
    API_ERROR: {
      description: 'Erreurs techniques',
      impact: 'HIGH',
      solutions: [
        'Am√©liorer la gestion d\'erreurs',
        'Ajouter des fallbacks',
        'Monitorer les performances API'
      ]
    }
  }

  const analyzedIssues = Object.entries(commonIssues).map(([issue, count]) => ({
    issue,
    count,
    category: issueCategories[issue] || {
      description: 'Probl√®me non cat√©goris√©',
      impact: 'MEDIUM',
      solutions: ['Analyser et cat√©goriser ce probl√®me']
    }
  })).sort((a, b) => b.count - a.count)

  return {
    totalIssues: Object.values(commonIssues).reduce((a, b) => a + b, 0),
    criticalIssues: analyzedIssues.filter(i => i.category.impact === 'HIGH'),
    mediumIssues: analyzedIssues.filter(i => i.category.impact === 'MEDIUM'),
    issueCategories
  }
}

function generateRecommendations(results) {
  const recommendations = {
    immediate: [],
    shortTerm: [],
    longTerm: []
  }

  const { summary } = results

  // Recommandations imm√©diates (critiques)
  if (summary.averageScores.contextUnderstanding < 70) {
    recommendations.immediate.push({
      priority: 'CRITICAL',
      action: 'Am√©liorer la compr√©hension contextuelle',
      description: 'Le chatbot ne comprend pas correctement le contexte des conversations',
      implementation: 'Revoir les prompts et la logique de classification'
    })
  }

  if (summary.averageScores.precision < 70) {
    recommendations.immediate.push({
      priority: 'HIGH',
      action: 'Structurer les r√©ponses avec plus de d√©tails',
      description: 'Les r√©ponses manquent de pr√©cision et de d√©tails concrets',
      implementation: 'Cr√©er des templates de r√©ponse structur√©s'
    })
  }

  // Recommandations √† court terme
  recommendations.shortTerm.push({
    priority: 'MEDIUM',
    action: 'Enrichir la base de connaissances',
    description: 'Ajouter plus de vari√©t√© dans les suggestions et services',
    implementation: 'Int√©grer de nouvelles donn√©es et services'
  })

  recommendations.shortTerm.push({
    priority: 'MEDIUM',
    action: 'Am√©liorer la gestion des conversations multi-tours',
    description: 'Le chatbot doit mieux maintenir le contexte entre les messages',
    implementation: 'Impl√©menter une m√©moire conversationnelle plus robuste'
  })

  // Recommandations √† long terme
  recommendations.longTerm.push({
    priority: 'LOW',
    action: 'Personnalisation avanc√©e',
    description: 'Adapter les r√©ponses aux pr√©f√©rences utilisateur',
    implementation: 'Syst√®me de profils utilisateur et d\'apprentissage'
  })

  recommendations.longTerm.push({
    priority: 'LOW',
    action: 'Int√©gration multi-langues',
    description: 'Support natif pour plusieurs langues',
    implementation: 'Traduction contextuelle et culturelle'
  })

  return recommendations
}

function generateActionPlan(results) {
  const actionPlan = {
    phase1: {
      duration: '1-2 semaines',
      objectives: [
        'Corriger les probl√®mes critiques identifi√©s',
        'Am√©liorer la compr√©hension contextuelle',
        'Structurer les r√©ponses de base'
      ],
      tasks: [
        'Revoir les prompts de classification',
        'Cr√©er des templates de r√©ponse standardis√©s',
        'Tester les am√©liorations sur un √©chantillon'
      ]
    },
    phase2: {
      duration: '3-4 semaines',
      objectives: [
        'Enrichir la base de connaissances',
        'Am√©liorer la vari√©t√© des suggestions',
        'Optimiser les performances par topic'
      ],
      tasks: [
        'Ajouter de nouveaux services et √©tablissements',
        'Cr√©er des r√©ponses sp√©cialis√©es par cat√©gorie',
        'Impl√©menter une meilleure gestion d\'erreurs'
      ]
    },
    phase3: {
      duration: '2-3 mois',
      objectives: [
        'Personnalisation avanc√©e',
        'Int√©gration de nouvelles fonctionnalit√©s',
        'Optimisation continue'
      ],
      tasks: [
        'Syst√®me de profils utilisateur',
        'Analytics et monitoring avanc√©s',
        'Int√©gration d\'APIs externes'
      ]
    }
  }

  return actionPlan
}

function generateAnalysisReport(analysis) {
  const report = {
    timestamp: new Date().toISOString(),
    analysis: analysis
  }

  // Sauvegarder le rapport d'analyse
  fs.writeFileSync('audit-analysis.json', JSON.stringify(report, null, 2))
  console.log('üìÑ Rapport d\'analyse g√©n√©r√© : audit-analysis.json\n')
}

function displayAnalysisSummary(analysis) {
  console.log('üìä RAPPORT D\'ANALYSE D√âTAILL√â - GLIITZ CHAT AUDIT')
  console.log('=' * 60)
  
  // R√©sum√© ex√©cutif
  console.log('\nüéØ R√âSUM√â EX√âCUTIF')
  console.log(`√âtat g√©n√©ral : ${analysis.executiveSummary.overallHealth}`)
  console.log('\n‚úÖ Points forts :')
  analysis.executiveSummary.keyStrengths.forEach(strength => {
    console.log(`  ‚Ä¢ ${strength}`)
  })
  
  if (analysis.executiveSummary.criticalIssues.length > 0) {
    console.log('\n‚ö†Ô∏è Probl√®mes critiques :')
    analysis.executiveSummary.criticalIssues.forEach(issue => {
      console.log(`  ‚Ä¢ ${issue}`)
    })
  }

  // Analyse de performance
  console.log('\nüìà ANALYSE DE PERFORMANCE')
  console.log('\nüèÜ Topics les mieux performants :')
  analysis.performanceAnalysis.bestPerformingTopics.forEach(topic => {
    console.log(`  ‚Ä¢ ${topic}`)
  })
  
  if (analysis.performanceAnalysis.worstPerformingTopics.length > 0) {
    console.log('\n‚ö†Ô∏è Topics √† am√©liorer :')
    analysis.performanceAnalysis.worstPerformingTopics.forEach(topic => {
      console.log(`  ‚Ä¢ ${topic}`)
    })
  }

  // Analyse des probl√®mes
  console.log('\nüîç ANALYSE DES PROBL√àMES')
  if (analysis.issueAnalysis.criticalIssues.length > 0) {
    console.log('\nüö® Probl√®mes critiques :')
    analysis.issueAnalysis.criticalIssues.forEach(issue => {
      console.log(`  ‚Ä¢ ${issue.issue}: ${issue.count} occurrences`)
      console.log(`    Description: ${issue.category.description}`)
    })
  }

  // Recommandations
  console.log('\nüí° RECOMMANDATIONS PRIORITAIRES')
  console.log('\n‚ö° Actions imm√©diates :')
  analysis.recommendations.immediate.forEach(rec => {
    console.log(`  ‚Ä¢ [${rec.priority}] ${rec.action}`)
    console.log(`    ${rec.description}`)
  })

  console.log('\nüìÖ Actions √† court terme :')
  analysis.recommendations.shortTerm.forEach(rec => {
    console.log(`  ‚Ä¢ [${rec.priority}] ${rec.action}`)
  })

  console.log('\nüéØ Plan d\'action - Phase 1 (1-2 semaines) :')
  analysis.actionPlan.phase1.tasks.forEach(task => {
    console.log(`  ‚Ä¢ ${task}`)
  })

  console.log('\n‚ú® Analyse termin√©e ! Consultez audit-analysis.json pour plus de d√©tails.')
}

// Lancer l'analyse
if (import.meta.url === `file://${process.argv[1]}`) {
  analyzeAuditResults()
}

export { analyzeAuditResults }
