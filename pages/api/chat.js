import { askWeezAgent } from '../../lib/openai'

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  const { message, userName, isMember, conversationHistory } = req.body

  try {
    // V√©rifier si OpenAI est configur√©
    if (!process.env.OPENAI_API_KEY) {
      console.warn('‚ö†Ô∏è OpenAI non configur√© - utilisation de r√©ponses de d√©monstration')
      
      // R√©ponse de d√©monstration intelligente
      const demoResponses = [
        "‚ú® Bienvenue sur Get Weez ! Je suis votre concierge IA pour Marbella. Malheureusement, l'API OpenAI n'est pas encore configur√©e, mais je peux quand m√™me vous aider avec des suggestions !",
        "üèñÔ∏è Pour une exp√©rience authentique √† Marbella, je vous recommande le Puente Romano Beach Resort et La Sala Puerto Ban√∫s pour d√Æner.",
        "üçæ Voulez-vous que je vous aide √† r√©server une table dans un restaurant exclusif ? (Note: OpenAI API n√©cessaire pour des r√©ponses personnalis√©es)",
        "üéØ Mode d√©monstration actif. Configurez votre cl√© OpenAI pour d√©bloquer toutes les fonctionnalit√©s IA !"
      ]
      
      const randomResponse = demoResponses[Math.floor(Math.random() * demoResponses.length)]
      return res.status(200).json({ reply: randomResponse })
    }

    // Appeler l'agent Get Weez avec l'historique de conversation
    const reply = await askWeezAgent(message, userName, isMember, conversationHistory)

    res.status(200).json({ reply })
  } catch (error) {
    console.error('Error in chat API:', error)
    res.status(500).json({ 
      error: 'Internal server error',
      reply: "D√©sol√©, une erreur s'est produite avec Get Weez. En mode d√©monstration, toutes les fonctionnalit√©s ne sont pas disponibles. Veuillez r√©essayer plus tard."
    })
  }
}