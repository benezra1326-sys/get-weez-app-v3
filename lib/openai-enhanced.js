// Syst√®me OpenAI am√©lior√© pour Gliitz - R√©ponses concises avec liens et m√©dias
import OpenAI from 'openai'
import { getUserPreferences } from './smartSorting.js'

// Initialisation OpenAI
let openai = null
const apiKey = process.env.OPENAI_API_KEY || process.env.NEXT_PUBLIC_OPENAI_API_KEY
if (apiKey && apiKey.length > 20) {
  openai = new OpenAI({ apiKey })
  console.log('‚úÖ OpenAI Enhanced initialis√©')
} else {
  console.warn('‚ö†Ô∏è Cl√© OpenAI manquante')
}

// Prompt syst√®me optimis√© pour des r√©ponses courtes et riches - MULTILINGUE
const SYSTEM_PROMPT = `You are **Gliitz**, a luxury virtual concierge in Marbella.

## üåç CRITICAL: UNIVERSAL MULTILINGUAL SUPPORT
- **ALWAYS** detect the user's language automatically from their message
- **ALWAYS** respond in the EXACT SAME language as the user
- **ALL LANGUAGES SUPPORTED**: French, English, Spanish, Hebrew, Arabic, Russian, Swedish, Italian, Portuguese, Polish, Ukrainian, Persian, German, Dutch, Romanian, Chinese, Japanese, Korean, Turkish, Hindi, and ANY other language
- **NO EXCEPTIONS**: Whatever language the user uses, respond in that language

Examples for Marbella's international community:
üá´üá∑ "Bonjour" ‚Üí French | üá¨üáß "Hello" ‚Üí English | üá™üá∏ "Hola" ‚Üí Spanish
üáÆüá± "◊©◊ú◊ï◊ù" ‚Üí Hebrew | üá∏üá¶ "ŸÖÿ±ÿ≠ÿ®ÿß" ‚Üí Arabic | üá∑üá∫ "–ü—Ä–∏–≤–µ—Ç" ‚Üí Russian
üá∏üá™ "Hej" ‚Üí Swedish | üáÆüáπ "Ciao" ‚Üí Italian | üáµüáπ "Ol√°" ‚Üí Portuguese
üáµüá± "Cze≈õƒá" ‚Üí Polish | üá∫üá¶ "–ü—Ä–∏–≤—ñ—Ç" ‚Üí Ukrainian | üáÆüá∑ "ÿ≥ŸÑÿßŸÖ" ‚Üí Persian
üá©üá™ "Hallo" ‚Üí German | üá≥üá± "Hallo" ‚Üí Dutch | üá∑üá¥ "BunƒÉ" ‚Üí Romanian
üá®üá≥ "‰Ω†Â•Ω" ‚Üí Chinese | üáØüáµ "„Åì„Çì„Å´„Å°„ÅØ" ‚Üí Japanese | üá∞üá∑ "ÏïàÎÖïÌïòÏÑ∏Ïöî" ‚Üí Korean

## üéØ Response Style
- **CONCISE**: Maximum 3-4 short sentences
- **STRUCTURED**: Use bullet points when relevant
- **VARIED**: Don't always suggest restaurants! Adapt to context:
  * Morning ‚Üí Suggest breakfast spots, beaches, activities
  * "Bonjour" / "Hello" ‚Üí Ask what they're looking for (restaurants, events, services, activities)
  * Specific request ‚Üí Suggest relevant category (nightlife, wellness, culture, etc.)
- **CONTEXTUAL**: Understand the user's intent before suggesting
- **EMOJIS**: Use contextual emojis (üçΩÔ∏è restaurants, üèñÔ∏è beaches, ‚õµ yachts, üè° villas, üéâ clubs, üíÜ spa, üé≠ culture, üõçÔ∏è shopping)

## üìù Response Format (CRITICAL!)
1. **Short greeting** (1 line) in user's language
2. **Recommendations** (2-3 options max)
   - Use ONLY the product name in **bold**, like: **Nobu Marbella**
   - DO NOT put descriptions in bold
   - Format: **ProductName** - Description here
   - WRONG: **Activities sportives** : Engagez un **coach sportif**
   - CORRECT: **Coach Sportif** - S√©ance personnalis√©e en plein air
3. **Follow-up question** (1 line)

## üìã Content Guidelines
- Use **bold** for establishment/event names
- Include ratings when available (‚≠ê 4.8/5)
- Add relevant emojis (üçΩÔ∏è restaurants, üèñÔ∏è beaches, ‚õµ yachts, üè° villas, üéâ clubs)
- NO links in responses - just names and descriptions

## üíé Available Data
**IMPORTANT**: You will receive real-time data from Supabase database including:
- Establishments with exact names, ratings, locations
- Events with exact dates and locations  
- Services with exact names and descriptions

**CRITICAL**: Use ONLY the exact names provided in the data sections below. Do NOT invent or modify names!

## ‚ú® Perfect Response Examples

**French:**
"Je te recommande ces 3 rooftops exclusifs :
‚Ä¢ **Sky Lounge** - Vue panoramique 360¬∞ ‚≠ê 4.8/5
‚Ä¢ **Terrace Premium** - Cocktails signature üç∏
Pour combien de personnes ? üë•"

**Spanish:**
"Te recomiendo estos 3 rooftops exclusivos:
‚Ä¢ **Sky Lounge** - Vista panor√°mica 360¬∞ ‚≠ê 4.8/5
‚Ä¢ **Terrace Premium** - C√≥cteles signature üç∏
¬øPara cu√°ntas personas? üë•"

**English:**
"I recommend these 3 exclusive rooftops:
‚Ä¢ **Sky Lounge** - 360¬∞ panoramic view ‚≠ê 4.8/5
‚Ä¢ **Terrace Premium** - Signature cocktails üç∏
For how many people? üë•"

## üö´ Avoid
- Long descriptive sentences
- Unnecessary repetitions
- Unverified information
- Too many choices (max 3 options)

## üéØ REMEMBER: The language you use MUST MATCH the user's language!
`

export async function askGliitzAgent(message, conversationHistory = [], userId = null, supabaseData = null) {
  console.log('ü§ñ Gliitz Enhanced - Message:', message)
  console.log('üìä Donn√©es Supabase re√ßues:', {
    establishments: supabaseData?.establishments?.length || 0,
    events: supabaseData?.events?.length || 0,
    services: supabaseData?.services?.length || 0
  })

  try {
    if (!openai) throw new Error('OpenAI non disponible')

    // Utiliser les donn√©es Supabase si disponibles, sinon fallback
    const establishments = supabaseData?.establishments || []
    const events = supabaseData?.events || []
    const services = supabaseData?.services || []
    
    console.log('üîç Donn√©es utilis√©es:', {
      establishments: establishments.length,
      events: events.length,
      services: services.length
    })

    // Construire le prompt avec les donn√©es r√©elles
    let enhancedPrompt = SYSTEM_PROMPT
    
    // V√©rifier si on a des donn√©es Supabase
    const hasSupabaseData = establishments.length > 0 || events.length > 0 || services.length > 0
    
    if (!hasSupabaseData) {
      enhancedPrompt += `\n\n## ‚ö†Ô∏è CRITICAL: NO SUPABASE DATA AVAILABLE
**DO NOT** recommend any establishments, events, or services from your training data!
**ONLY** say that the database is temporarily unavailable and ask the user to try again later.
**DO NOT** suggest Nobu, Nikki Beach, or any other establishments from your knowledge base.`
    }
    
    // Ajouter les √©tablissements r√©els
    if (establishments && establishments.length > 0) {
      enhancedPrompt += `\n\n## üíé ESTABLISHMENTS - USE ONLY THESE EXACT NAMES (from Supabase)\n`
      enhancedPrompt += `**CRITICAL**: You MUST use the EXACT names below. Do NOT modify or invent names!\n`
      enhancedPrompt += `**FORBIDDEN**: Do NOT suggest any establishment NOT listed below, including Nobu Marbella, Nikki Beach, or any from your training data!\n\n`
      enhancedPrompt += establishments.map(e => 
        `- **${e.name}** (${e.zone}) - ${e.description || e.type || 'Restaurant'} - ‚≠ê ${e.rating || 'N/A'}/5`
      ).join('\n')
      enhancedPrompt += `\n\n**IMPORTANT**: When recommending, use the EXACT name with **bold** like: **${establishments[0]?.name}**`
      enhancedPrompt += `\n\n**STRICT RULE**: ONLY recommend establishments from the list above. If no suitable establishment is in the list, say "I don't have that type of establishment in my current database."`
    }
    
    // Ajouter les √©v√©nements r√©els
    if (events && events.length > 0) {
      enhancedPrompt += `\n\n## üéâ EVENTS - USE ONLY THESE EXACT NAMES (from Supabase)\n`
      enhancedPrompt += `**CRITICAL**: You MUST use the EXACT event names below. Do NOT modify or invent!\n\n`
      enhancedPrompt += events.slice(0, 20).map(e => 
        `- **${e.title || e.name}** - ${new Date(e.date).toLocaleDateString('fr-FR', { day: 'numeric', month: 'long' })} - ${e.location || 'Marbella'}`
      ).join('\n')
      enhancedPrompt += `\n\n**IMPORTANT**: Use EXACT event names with **bold** like: **${events[0]?.title || events[0]?.name}**`
    }
    
    // Ajouter les services r√©els
    if (services && services.length > 0) {
      enhancedPrompt += `\n\n## üõéÔ∏è SERVICES - USE ONLY THESE EXACT NAMES (from Supabase)\n`
      enhancedPrompt += `**CRITICAL**: You MUST use the EXACT service names below. Do NOT modify or invent!\n\n`
      enhancedPrompt += services.map(s => 
        `- **${s.name}** - ${s.description || s.category}`
      ).join('\n')
      enhancedPrompt += `\n\n**IMPORTANT**: Use EXACT service names with **bold** like: **${services[0]?.name}**`
    }

    // R√©cup√©rer les pr√©f√©rences utilisateur si userId fourni
    enhancedPrompt += '\n\n'
    
    if (userId) {
      const userPreferences = getUserPreferences(userId)
      if (userPreferences) {
        enhancedPrompt += `\n\n## üéØ USER PREFERENCES (Use these for personalized recommendations)
### Go√ªts & Pr√©f√©rences:
${Object.entries(userPreferences.tastes || {}).map(([key, values]) => 
  `- ${key}: ${values.join(', ')}`
).join('\n')}

### Interdictions & Restrictions:
${Object.entries(userPreferences.restrictions || {}).map(([key, values]) => 
  `- ${key}: ${values.join(', ')}`
).join('\n')}

### Peurs & Phobies:
- ${(userPreferences.fears || []).join(', ')}

### Pr√©f√©rences Alimentaires:
${Object.entries(userPreferences.dietary || {}).map(([key, values]) => 
  `- ${key}: ${values.join(', ')}`
).join('\n')}

### Pr√©f√©rences de Service:
- Langue: ${userPreferences.service?.communication || 'french'}
- Budget: ${userPreferences.service?.budget_range || 'medium'}
- Taille de groupe: ${userPreferences.service?.group_size || 'couple'}

**IMPORTANT**: Priorisez les √©tablissements, √©v√©nements et services qui correspondent aux pr√©f√©rences utilisateur. √âvitez absolument les interdictions et peurs mentionn√©es. Proposez TOUJOURS des services et √©v√©nements en plus des √©tablissements.`
      }
    }

    // Construire l'historique de conversation
    const messages = [
      { role: 'system', content: enhancedPrompt },
      ...conversationHistory.slice(-6).map(m => ({
        role: m.role,
        content: m.content
      })),
      { role: 'user', content: message }
    ]

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages,
      max_tokens: 400, // Augment√© pour inclure plus de services/√©v√©nements
      temperature: 0.7,
      presence_penalty: 0.5,
      frequency_penalty: 0.5
    })

    const response = completion.choices[0]?.message?.content?.trim()
    
    if (response) {
      console.log('‚úÖ R√©ponse g√©n√©r√©e avec pr√©f√©rences')
      return response
    } else {
      throw new Error('R√©ponse vide')
    }

  } catch (error) {
    console.error('‚ùå Erreur:', error.message)
    return generateSmartFallback(message)
  }
}

// Fonction de d√©tection de langue
function detectLanguage(message) {
  const msg = message.toLowerCase()
  
  // D√©tection par mots-cl√©s courants
  if (/\b(hola|restaurante|c√≥mo|d√≥nde|quiero|necesito|gracias|buenas)\b/.test(msg)) return 'es'
  if (/\b(hello|restaurant|how|where|want|need|thanks|good)\b/.test(msg)) return 'en'
  if (/\b(bonjour|restaurant|comment|o√π|veux|besoin|merci|bonne)\b/.test(msg)) return 'fr'
  if (/\b(hallo|restaurant|wie|wo|m√∂chte|brauche|danke|guten)\b/.test(msg)) return 'de'
  if (/\b(ciao|ristorante|come|dove|voglio|bisogno|grazie|buon)\b/.test(msg)) return 'it'
  if (/\b(ol√°|restaurante|como|onde|quero|preciso|obrigado|bom)\b/.test(msg)) return 'pt'
  
  // D√©tection par caract√®res
  if (/[\u0600-\u06FF]/.test(msg)) return 'ar' // Arabe
  if (/[\u4E00-\u9FFF]/.test(msg)) return 'zh' // Chinois
  if (/[\u0400-\u04FF]/.test(msg)) return 'ru' // Russe
  
  return 'fr' // D√©faut fran√ßais
}

// Fallback intelligent avec liens et multilingue
function generateSmartFallback(message) {
  const msg = message.toLowerCase()
  const lang = detectLanguage(message)
  
  const responses = {
    fr: {
      restaurant: `Je te recommande ces √©tablissements :`,
      event: `D√©couvre ces √©v√©nements exclusifs :`,
      beach: `Voici les meilleurs beach clubs :`,
      default: `Bonjour ! Je suis Gliitz, ton concierge IA. üåü\n\nJe peux t'aider avec :\n‚Ä¢ Restaurants & Gastronomie üçΩÔ∏è\n‚Ä¢ √âv√©nements & Soir√©es üéâ\n‚Ä¢ Beach Clubs & Plages üèñÔ∏è\n‚Ä¢ Services VIP ‚≠ê\n\nQue souhaites-tu organiser ? ‚ú®`
    },
    es: {
      restaurant: `Te recomiendo estos establecimientos:`,
      event: `Descubre estos eventos exclusivos:`,
      beach: `Aqu√≠ est√°n los mejores beach clubs:`,
      default: `¬°Hola! Soy Gliitz, tu concierge IA. üåü\n\n¬øEn qu√© puedo ayudarte hoy?\n‚Ä¢ Restaurantes & Gastronom√≠a üçΩÔ∏è\n‚Ä¢ Eventos & Fiestas üéâ\n‚Ä¢ Beach Clubs & Playas üèñÔ∏è\n‚Ä¢ Servicios VIP ‚≠ê\n\n¬øQu√© te gustar√≠a organizar? ‚ú®`
    },
    en: {
      restaurant: `I recommend these establishments:`,
      event: `Discover these exclusive events:`,
      beach: `Here are the best beach clubs:`,
      default: `Hello! I'm Gliitz, your AI concierge. üåü\n\nI can help you with:\n‚Ä¢ Restaurants & Gastronomy üçΩÔ∏è\n‚Ä¢ Events & Parties üéâ\n‚Ä¢ Beach Clubs & Beaches üèñÔ∏è\n‚Ä¢ VIP Services ‚≠ê\n\nWhat would you like to organize? ‚ú®`
    }
  }
  
  const langResponses = responses[lang] || responses.fr
  
  // D√©tection du type de demande
  if (msg.includes('restaurant') || msg.includes('manger') || msg.includes('diner') || msg.includes('comer') || msg.includes('eat')) {
    const establishments = [
      `[Nobu Marbella](https://gliitz.com/establishment/1) - ${lang === 'es' ? 'Japon√©s de lujo' : lang === 'en' ? 'Luxury Japanese' : 'Japonais de luxe'} ‚≠ê 4.8/5`,
      `[La Terraza del Mar](https://gliitz.com/establishment/2) - ${lang === 'es' ? 'Mediterr√°neo' : lang === 'en' ? 'Mediterranean' : 'M√©diterran√©en'} üèñÔ∏è`,
      `[Skina](https://gliitz.com/establishment/5) - ${lang === 'es' ? 'Gastron√≥mico estrella' : lang === 'en' ? 'Starred Gastronomic' : 'Gastronomique √©toil√©'} ‚ú®`
    ]
    const question = lang === 'es' ? '¬øPara cu√°ntas personas y cu√°ndo? üë•üìÖ' : lang === 'en' ? 'For how many people and when? üë•üìÖ' : 'Pour combien de personnes et quand ? üë•üìÖ'
    return `${langResponses.restaurant}\n\n${establishments.map(e => `‚Ä¢ ${e}`).join('\n')}\n\n${question}`
  }
  
  if (msg.includes('event') || msg.includes('√©v√©nement') || msg.includes('soir√©e') || msg.includes('evento') || msg.includes('fiesta')) {
    return langResponses.event || langResponses.default
  }
  
  if (msg.includes('beach') || msg.includes('plage') || msg.includes('playa')) {
    return langResponses.beach || langResponses.default
  }
  
  // R√©ponse par d√©faut
  return langResponses.default
}

export default { askGliitzAgent }

