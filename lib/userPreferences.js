// User Preferences Management for Gliitz AI
// G√®re les pr√©f√©rences utilisateur pour personnaliser l'exp√©rience IA

const PREFERENCES_KEY = 'gliitz_user_preferences'

export const defaultPreferences = {
  // Langue
  language: 'fr',
  
  // Voix pr√©f√©r√©e
  voice: 'feminine', // 'feminine' ou 'masculine'
  voiceSpeed: 1.0,
  
  // Style de r√©ponse
  responseStyle: 'elegant', // 'elegant', 'casual', 'expert', 'concise'
  
  // Centres d'int√©r√™t
  interests: {
    gastronomy: true,
    nightlife: true,
    wellness: false,
    shopping: false,
    culture: false,
    sports: false,
    beach: true,
    events: true
  },
  
  // Pr√©f√©rences culinaires
  culinary: {
    cuisines: [], // ['japanese', 'italian', 'french', 'mediterranean', 'fusion']
    dietary: [], // ['vegetarian', 'vegan', 'gluten-free', 'halal', 'kosher']
    priceRange: [1, 4], // 1-4 (‚Ç¨ √† ‚Ç¨‚Ç¨‚Ç¨‚Ç¨)
    atmosphere: 'chic' // 'romantic', 'casual', 'chic', 'family', 'trendy'
  },
  
  // Pr√©f√©rences d'√©tablissements
  establishments: {
    preferredZones: [], // ['Puerto Banus', 'Marbella Centro', 'Golden Mile']
    preferredTypes: [], // ['restaurant', 'bar', 'club', 'beach-club']
    minRating: 4.0
  },
  
  // Pr√©f√©rences de chat
  chat: {
    autoVoice: false, // Lecture vocale automatique
    voiceInput: false, // Dict√©e vocale par d√©faut
    suggestions: true, // Afficher les suggestions
    notifications: true
  },
  
  // Mode d'affichage
  theme: 'dark', // 'dark' ou 'light'
  
  // G√©olocalisation
  location: {
    enabled: false,
    city: 'Marbella',
    country: 'Spain'
  }
}

export class UserPreferencesManager {
  constructor() {
    this.preferences = this.load()
  }

  // Charger les pr√©f√©rences
  load() {
    if (typeof window === 'undefined') return defaultPreferences
    
    try {
      const saved = localStorage.getItem(PREFERENCES_KEY)
      if (saved) {
        const parsed = JSON.parse(saved)
        // Merge avec les pr√©f√©rences par d√©faut pour g√©rer les nouvelles options
        return { ...defaultPreferences, ...parsed }
      }
    } catch (error) {
      console.error('Erreur lors du chargement des pr√©f√©rences:', error)
    }
    
    return defaultPreferences
  }

  // Sauvegarder les pr√©f√©rences
  save(preferences = this.preferences) {
    if (typeof window === 'undefined') return
    
    try {
      localStorage.setItem(PREFERENCES_KEY, JSON.stringify(preferences))
      this.preferences = preferences
      
      // √âmettre un √©v√©nement pour notifier les composants
      window.dispatchEvent(new CustomEvent('preferencesUpdated', { 
        detail: preferences 
      }))
      
      return true
    } catch (error) {
      console.error('Erreur lors de la sauvegarde des pr√©f√©rences:', error)
      return false
    }
  }

  // Obtenir toutes les pr√©f√©rences
  getAll() {
    return this.preferences
  }

  // Obtenir une pr√©f√©rence sp√©cifique
  get(key) {
    const keys = key.split('.')
    let value = this.preferences
    
    for (const k of keys) {
      value = value[k]
      if (value === undefined) return null
    }
    
    return value
  }

  // Mettre √† jour une pr√©f√©rence
  set(key, value) {
    const keys = key.split('.')
    const newPreferences = { ...this.preferences }
    let current = newPreferences
    
    for (let i = 0; i < keys.length - 1; i++) {
      if (!current[keys[i]]) current[keys[i]] = {}
      current = current[keys[i]]
    }
    
    current[keys[keys.length - 1]] = value
    return this.save(newPreferences)
  }

  // Mettre √† jour plusieurs pr√©f√©rences
  update(updates) {
    const newPreferences = { ...this.preferences, ...updates }
    return this.save(newPreferences)
  }

  // R√©initialiser les pr√©f√©rences
  reset() {
    return this.save(defaultPreferences)
  }

  // G√©n√©rer un prompt syst√®me personnalis√© pour l'IA
  generateSystemPrompt() {
    const { language, responseStyle, interests, culinary, establishments } = this.preferences
    
    let prompt = `Tu es Gliitz, un concierge IA de luxe √† Marbella. `
    
    // Style de r√©ponse
    const styles = {
      elegant: "R√©ponds avec √©l√©gance et raffinement, en utilisant un vocabulaire sophistiqu√©.",
      casual: "R√©ponds de mani√®re d√©contract√©e et amicale, comme un ami local.",
      expert: "R√©ponds avec expertise et pr√©cision, en donnant des d√©tails techniques.",
      concise: "R√©ponds de mani√®re concise et directe, en allant √† l'essentiel."
    }
    prompt += styles[responseStyle] || styles.elegant
    prompt += '\n\n'
    
    // Centres d'int√©r√™t actifs
    const activeInterests = Object.keys(interests).filter(k => interests[k])
    if (activeInterests.length > 0) {
      const interestLabels = {
        gastronomy: 'gastronomie',
        nightlife: 'vie nocturne',
        wellness: 'bien-√™tre',
        shopping: 'shopping',
        culture: 'culture',
        sports: 'sports',
        beach: 'plages',
        events: '√©v√©nements'
      }
      
      const interestList = activeInterests.map(i => interestLabels[i]).join(', ')
      prompt += `L'utilisateur s'int√©resse particuli√®rement √† : ${interestList}.\n`
    }
    
    // Pr√©f√©rences culinaires
    if (culinary.cuisines.length > 0) {
      prompt += `Cuisines pr√©f√©r√©es : ${culinary.cuisines.join(', ')}.\n`
    }
    
    if (culinary.dietary.length > 0) {
      prompt += `R√©gimes alimentaires : ${culinary.dietary.join(', ')}.\n`
    }
    
    if (culinary.atmosphere) {
      const atmospheres = {
        romantic: 'romantique',
        casual: 'd√©contract√©e',
        chic: 'chic et √©l√©gant',
        family: 'familiale',
        trendy: 'tendance'
      }
      prompt += `Ambiance pr√©f√©r√©e : ${atmospheres[culinary.atmosphere]}.\n`
    }
    
    // Zones pr√©f√©r√©es
    if (establishments.preferredZones.length > 0) {
      prompt += `Zones pr√©f√©r√©es : ${establishments.preferredZones.join(', ')}.\n`
    }
    
    // Note minimale
    if (establishments.minRating > 3.0) {
      prompt += `Recommande uniquement des √©tablissements avec une note minimale de ${establishments.minRating}/5.\n`
    }
    
    prompt += '\nAdapte tes recommandations en fonction de ces pr√©f√©rences.'
    
    return prompt
  }

  // G√©n√©rer des suggestions contextuelles
  generateContextualSuggestions() {
    const { interests, culinary } = this.preferences
    const now = new Date()
    const hour = now.getHours()
    const day = now.getDay()
    
    const suggestions = []
    
    // Suggestions bas√©es sur l'heure
    if (hour >= 7 && hour < 12) {
      suggestions.push("O√π prendre un brunch ensoleill√© ? ‚òÄÔ∏è")
      if (interests.beach) {
        suggestions.push("Une plage tranquille pour la matin√©e ? üèñÔ∏è")
      }
    } else if (hour >= 12 && hour < 15) {
      suggestions.push("Un d√©jeuner avec vue sur mer ? üåä")
      if (culinary.cuisines.includes('mediterranean')) {
        suggestions.push("Restaurant m√©diterran√©en pour d√©jeuner ? üçΩÔ∏è")
      }
    } else if (hour >= 15 && hour < 19) {
      if (interests.wellness) {
        suggestions.push("Un spa pour l'apr√®s-midi ? üíÜ")
      }
      suggestions.push("Un rooftop pour l'ap√©ritif ? üç∏")
    } else if (hour >= 19 && hour < 23) {
      suggestions.push("Restaurant pour ce soir ? ‚ú®")
      if (interests.nightlife) {
        suggestions.push("O√π sortir ce soir ? üåô")
      }
    } else {
      if (interests.nightlife) {
        suggestions.push("Les meilleurs clubs ouverts ? üíÉ")
      }
    }
    
    // Suggestions bas√©es sur le jour
    if (day === 0 || day === 6) { // Weekend
      suggestions.push("Programme parfait pour le weekend ? üéâ")
      if (interests.events) {
        suggestions.push("√âv√©nements ce weekend ? üéä")
      }
    }
    
    // Suggestions bas√©es sur les int√©r√™ts
    if (interests.gastronomy && suggestions.length < 4) {
      suggestions.push("D√©couvrir une nouvelle cuisine ? üç±")
    }
    
    if (interests.culture && suggestions.length < 4) {
      suggestions.push("√âv√©nements culturels √† Marbella ? üé≠")
    }
    
    if (interests.shopping && suggestions.length < 4) {
      suggestions.push("Boutiques de luxe √† visiter ? üëú")
    }
    
    // Toujours garder quelques suggestions g√©n√©riques
    const genericSuggestions = [
      "R√©serve une table VIP üåü",
      "Organise une soir√©e priv√©e ü•Ç",
      "Transport avec chauffeur üöó",
      "Exp√©rience unique √† Marbella ‚ú®"
    ]
    
    // M√©langer et limiter √† 6 suggestions
    const allSuggestions = [...suggestions, ...genericSuggestions]
    return allSuggestions.slice(0, 6)
  }
}

// Export singleton instance
export const preferencesManager = new UserPreferencesManager()

export default preferencesManager

