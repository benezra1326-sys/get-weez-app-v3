// Auto Language Detection for Gliitz
// D√©tecte automatiquement la langue du navigateur/mobile et adapte l'interface

/**
 * D√©tecte la langue du navigateur
 * @returns {string} Code langue (fr, en, es, he, ar, ru, etc.)
 */
export function detectBrowserLanguage() {
  if (typeof window === 'undefined') return 'fr'
  
  // R√©cup√©rer la langue du navigateur
  const browserLang = navigator.language || navigator.userLanguage
  
  // Extraire le code langue (ex: fr-FR ‚Üí fr)
  const langCode = browserLang.split('-')[0].toLowerCase()
  
  console.log('üåç Langue d√©tect√©e du navigateur:', langCode, '(' + browserLang + ')')
  
  return langCode
}

/**
 * Mapping des codes langue vers langues support√©es
 */
export const LANGUAGE_NAMES = {
  // Langues europ√©ennes
  'fr': 'Fran√ßais',
  'en': 'English',
  'es': 'Espa√±ol',
  'de': 'Deutsch',
  'it': 'Italiano',
  'pt': 'Portugu√™s',
  'nl': 'Nederlands',
  'sv': 'Svenska',
  'no': 'Norsk',
  'da': 'Dansk',
  'fi': 'Suomi',
  'pl': 'Polski',
  'cs': 'ƒåe≈°tina',
  'ro': 'Rom√¢nƒÉ',
  'el': 'ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨',
  'tr': 'T√ºrk√ße',
  
  // Langues slaves
  'ru': '–†—É—Å—Å–∫–∏–π',
  'uk': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
  'bg': '–ë—ä–ª–≥–∞—Ä—Å–∫–∏',
  'sr': '–°—Ä–ø—Å–∫–∏',
  
  // Langues moyen-orientales
  'ar': 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©',
  'he': '◊¢◊ë◊®◊ô◊™',
  'fa': 'ŸÅÿßÿ±ÿ≥€å',
  
  // Langues asiatiques
  'zh': '‰∏≠Êñá',
  'ja': 'Êó•Êú¨Ë™û',
  'ko': 'ÌïúÍµ≠Ïñ¥',
  'hi': '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä',
  'th': '‡πÑ‡∏ó‡∏¢',
  'vi': 'Ti·∫øng Vi·ªát',
  
  // Autres
  'id': 'Bahasa Indonesia',
  'ms': 'Bahasa Melayu'
}

/**
 * Obtenir la direction du texte (LTR ou RTL)
 * @param {string} langCode 
 * @returns {string} 'ltr' ou 'rtl'
 */
export function getTextDirection(langCode) {
  const rtlLanguages = ['ar', 'he', 'fa', 'ur']
  return rtlLanguages.includes(langCode) ? 'rtl' : 'ltr'
}

/**
 * Initialiser la langue de l'application au chargement
 */
export function initializeLanguage() {
  if (typeof window === 'undefined') return 'fr'
  
  // 1. V√©rifier si une langue est d√©j√† sauvegard√©e
  const savedLang = localStorage.getItem('gliitz_language')
  if (savedLang) {
    console.log('üåç Langue sauvegard√©e:', savedLang)
    return savedLang
  }
  
  // 2. Sinon, d√©tecter la langue du navigateur
  const detectedLang = detectBrowserLanguage()
  
  // 3. V√©rifier si la langue est support√©e par i18next
  const supportedI18nLanguages = ['fr', 'en', 'es']
  const i18nLang = supportedI18nLanguages.includes(detectedLang) 
    ? detectedLang 
    : 'en' // Fallback vers anglais pour l'interface
  
  // 4. Sauvegarder la langue d√©tect√©e
  localStorage.setItem('gliitz_language', detectedLang)
  localStorage.setItem('gliitz_i18n_language', i18nLang)
  
  console.log('üåç Langue initialis√©e:', detectedLang, '(Interface:', i18nLang + ')')
  
  return detectedLang
}

/**
 * Changer la langue de l'application
 * @param {string} langCode 
 */
export function setLanguage(langCode) {
  if (typeof window === 'undefined') return
  
  localStorage.setItem('gliitz_language', langCode)
  
  // Si la langue est support√©e par i18next, l'utiliser
  const supportedI18nLanguages = ['fr', 'en', 'es']
  const i18nLang = supportedI18nLanguages.includes(langCode) ? langCode : 'en'
  localStorage.setItem('gliitz_i18n_language', i18nLang)
  
  // Recharger la page pour appliquer
  window.location.reload()
}

/**
 * Obtenir la langue actuelle
 */
export function getCurrentLanguage() {
  if (typeof window === 'undefined') return 'fr'
  return localStorage.getItem('gliitz_language') || detectBrowserLanguage()
}

/**
 * G√©n√©rer un titre de conversation bas√© sur le sujet du premier message
 * @param {string} userMessage - Premier message de l'utilisateur
 * @returns {string} Titre descriptif bas√© sur le sujet (ex: "Diner romantique")
 */
export function generateConversationTitle(userMessage) {
  if (!userMessage || userMessage.length === 0) return 'Nouvelle conversation'
  
  // Nettoyer le message (enlever emojis et ponctuation excessive)
  let cleaned = userMessage
    .replace(/[‚ú®üåäüçΩÔ∏èüèñÔ∏è‚òÄÔ∏èüíÜüç∏üåôüíÉüéâüéäüç±üé≠üëúüåüü•Çüöóüé§üîäüí¨üì±?!.,:;]/g, '')
    .trim()
    .toLowerCase()
  
  // Mots vides √† ignorer (plus exhaustif)
  const stopWords = [
    // Fran√ßais
    'je', 'tu', 'il', 'elle', 'nous', 'vous', 'ils', 'elles', 'on',
    'le', 'la', 'les', 'un', 'une', 'des', 'du', 'de', 'd', '√†', 'au', 'aux',
    'pour', 'avec', 'dans', 'sur', 'sous', 'par', 'et', 'ou', 'o√π', 'qui', 'que', 'quoi',
    'me', 'te', 'se', 'ce', 'ma', 'ta', 'sa', 'mon', 'ton', 'son', 'mes', 'tes', 'ses',
    'veux', 'cherche', 'trouve', 'trouver', 'besoin', 'voudrais', 'aimerais', 'peux',
    // English
    'i', 'you', 'he', 'she', 'we', 'they', 'it',
    'the', 'a', 'an', 'this', 'that', 'these', 'those',
    'for', 'with', 'in', 'on', 'at', 'by', 'and', 'or', 'but',
    'want', 'need', 'find', 'looking', 'search', 'can', 'could', 'would',
    'my', 'your', 'his', 'her', 'our', 'their',
    // Spanish
    'yo', 't√∫', '√©l', 'ella', 'nosotros', 'vosotros', 'ellos', 'ellas',
    'el', 'la', 'los', 'las', 'un', 'una', 'unos', 'unas',
    'para', 'con', 'en', 'sobre', 'y', 'o', 'pero',
    'quiero', 'busco', 'necesito', 'puedo'
  ]
  
  // Extraire les mots significatifs
  const words = cleaned.split(' ').filter(w => w.length > 0)
  const keywords = words.filter(w => 
    w.length > 2 && 
    !stopWords.includes(w) &&
    !/^\d+$/.test(w) // Pas de nombres purs
  )
  
  // Si on a des mots-cl√©s, cr√©er un titre intelligent
  if (keywords.length > 0) {
    // Prendre 2-4 mots pour former le sujet
    const titleWords = keywords.slice(0, 4)
    
    // Capitaliser correctement
    const title = titleWords
      .map((word, index) => {
        // Premier mot ou mots importants en majuscule
        if (index === 0 || ['restaurant', 'hotel', 'villa', 'yacht', 'spa', 'club', 'beach', 'bar', 
                             'diner', 'lunch', 'breakfast', 'soir√©e', 'event', 'service'].includes(word)) {
          return word.charAt(0).toUpperCase() + word.slice(1)
        }
        return word
      })
      .join(' ')
    
    // Limiter √† 50 caract√®res
    if (title.length > 50) {
      return title.substring(0, 47) + '...'
    }
    
    return title
  }
  
  // Fallback : utiliser le message brut (limit√©)
  const fallbackTitle = cleaned.split(' ').slice(0, 5).join(' ')
  return fallbackTitle.charAt(0).toUpperCase() + fallbackTitle.slice(1).substring(0, 47)
}

export default {
  detectBrowserLanguage,
  getTextDirection,
  initializeLanguage,
  setLanguage,
  getCurrentLanguage,
  generateConversationTitle,
  LANGUAGE_NAMES
}

