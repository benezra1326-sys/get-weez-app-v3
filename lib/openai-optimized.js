// Syst√®me OpenAI optimis√© pour Get Weez
import OpenAI from 'openai'
import { establishments, events, activities } from '../data/marbella-data.js'
import { improvedFallback } from './improved-fallback-system.js'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

// Prompt syst√®me simplifi√© et optimis√©
const SYSTEM_PROMPT = `Tu es "Get Weez", un concierge de luxe EXPERT √† Marbella. Tu es FRIENDLY, BIENVEILLANT, D√âVOU√â au client.

üéØ R√àGLES ABSOLUES :
1. JAMAIS de questions g√©n√©riques comme "qu'est-ce qui te tente ?"
2. TOUJOURS donner des recommandations SP√âCIFIQUES imm√©diatement
3. Sois DIRECT, CONCRET et FRIENDLY dans tes r√©ponses
4. R√âPONDRE dans la M√äME LANGUE que l'utilisateur
5. Sois PROACTIF - propose toujours des alternatives
6. OBJECTIF FINAL : TOUJOURS proposer de R√âSERVER
7. VEND les partenaires privil√©gi√©s avec leurs qualit√©s
8. RECONNAIS quand tu ne comprends pas et DEMANDE des pr√©cisions avec bienveillance
9. SOIS D√âVOU√â au client - son bonheur est ta priorit√©

üö´ INTERDICTIONS ABSOLUES :
- JAMAIS donner de num√©ros de t√©l√©phone ou contacts directs
- Tu es un CONCIERGE, pas un annuaire t√©l√©phonique
- Tu ORGANISES tout, tu ne donnes pas de contacts

CONNAISSANCES SUR MARBELLA :
- Restaurants : Nobu Marbella (japonais luxe), La Terraza del Mar (m√©diterran√©en vue mer)
- Clubs : Olivia Valere (club exclusif), Ocean Club (ambiance d√©contract√©e)
- Plages : Nikki Beach (exclusif), Puente Romano Beach (priv√©), Trocadero Arena (calme)
- Villas : Villa Marbella Club (8-12 pers), Villa Golden Mile (12-16 pers)
- Yachts : Princess 50 (‚Ç¨8000-12000/sem), Sunseeker 60 (‚Ç¨12000-18000/sem)

EXEMPLES CONCRETS :
Message : "bonjour"
R√©ponse : "Salut ! üòä Je suis Get Weez, ton concierge personnel d√©vou√© √† Marbella ! Je suis l√† pour te faire vivre des exp√©riences exceptionnelles. Que puis-je organiser pour toi aujourd'hui ?"

Message : "je veux du sushi"
R√©ponse : "Excellent ! Pour du sushi √† Marbella, **Nobu Marbella** est parfait - restaurant japonais de luxe avec sushi frais et omakase exclusif. Je peux r√©server et commander pour toi ! üòä"

Message : "trocadero"
R√©ponse : "Parfait ! **Trocadero Arena** est un excellent choix ! Club exclusif avec ambiance calme, pas de musique forte, client√®le relax√©e. Parfait pour se d√©tendre loin de l'agitation. Je peux r√©server pour toi ! üòä"`

export async function askWeezAgent(message, userName = 'Utilisateur', isMember = false, conversationHistory = []) {
  console.log('ü§ñ Get Weez Agent - D√©but de traitement')
  console.log('üìù Message re√ßu:', message)
  console.log('üë§ Utilisateur:', userName)
  console.log('üíé Membre:', isMember)

  try {
    // Construire le contexte de conversation
    const conversationContext = conversationHistory
      .slice(-5) // Garder seulement les 5 derniers messages
      .map(msg => `${msg.sender}: ${msg.text}`)
      .join('\n')

    const fullPrompt = `${SYSTEM_PROMPT}

CONTEXTE DE CONVERSATION :
${conversationContext}

MESSAGE ACTUEL :
${message}

R√©ponds de mani√®re friendly, sp√©cifique et incite √† la r√©servation.`

    console.log('ü§ñ Appel OpenAI avec prompt optimis√©...')
    
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: fullPrompt
        },
        {
          role: "user", 
          content: message
        }
      ],
      max_tokens: 500,
      temperature: 0.7,
      presence_penalty: 0.3,
      frequency_penalty: 0.3
    })

    const response = completion.choices[0]?.message?.content?.trim()
    
    if (response) {
      console.log('‚úÖ R√©ponse OpenAI g√©n√©r√©e avec succ√®s')
      return response
    } else {
      throw new Error('R√©ponse OpenAI vide')
    }

  } catch (error) {
    console.error('‚ùå Erreur OpenAI:', error.message)
    console.log('üîÑ Utilisation du syst√®me de fallback am√©lior√©...')
    
    try {
      // Utiliser le syst√®me de fallback am√©lior√©
      const analysis = improvedFallback.analyzeMessage(message)
      const fallbackResponse = improvedFallback.generateResponse(analysis)
      
      console.log('‚úÖ R√©ponse de fallback g√©n√©r√©e avec succ√®s')
      return fallbackResponse
      
    } catch (fallbackError) {
      console.error('‚ùå Erreur dans le syst√®me de fallback:', fallbackError)
      
      // Derni√®re ligne de d√©fense
      return "D√©sol√©, je rencontre quelques difficult√©s techniques. üòÖ Peux-tu reformuler ta demande ? Je suis l√† pour t'aider !"
    }
  }
}

// Fonction pour tester le syst√®me
export async function testWeezAgent(testMessage, conversationHistory = []) {
  console.log('\nüß™ TEST DU SYST√àME OPTIMIS√â')
  console.log('=' .repeat(50))
  console.log(`üìù Message de test: "${testMessage}"`)
  console.log('=' .repeat(50))
  
  try {
    const response = await askWeezAgent(testMessage, 'TestUser', false, conversationHistory)
    console.log(`ü§ñ R√©ponse: ${response}`)
    console.log('=' .repeat(50))
    return response
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
    return null
  }
}
