// üß† G√âN√âRATEUR DE CONVERSATIONS H√âSITANTES - 1000 TESTS
// Objectif : Entra√Æner l'IA avec des conversations r√©alistes et h√©sitantes

export class HesitantConversationGenerator {
  constructor() {
    this.conversationTemplates = {
      // Sc√©narios de base
      scenarios: [
        'restaurant_hesitation',
        'yacht_uncertainty', 
        'villa_doubts',
        'event_planning_confusion',
        'budget_concerns',
        'timing_issues',
        'group_size_changes',
        'preference_changes',
        'location_hesitation',
        'service_uncertainty'
      ],
      
      // Patterns d'h√©sitation
      hesitationPatterns: [
        'Je ne sais pas...',
        'Hmm, je r√©fl√©chis...',
        'Attends, laisse-moi voir...',
        'Je ne suis pas s√ªr...',
        'Tu penses que...?',
        'Et si on...?',
        'Peut-√™tre que...',
        'Je me demande si...',
        'Qu\'est-ce que tu en penses?',
        'Je h√©site entre...'
      ],
      
      // Changements de direction
      directionChanges: [
        'En fait, je change d\'avis...',
        'Attends, j\'ai une autre id√©e...',
        'Non, finalement...',
        'Je me suis tromp√©...',
        'En fait, c\'est plut√¥t...',
        'J\'ai repens√© √†...',
        'Finalement, je pr√©f√®re...',
        'Je viens de me rappeler...',
        'En fait, on est plut√¥t...',
        'J\'ai chang√© d\'avis sur...'
      ]
    }
  }

  // === G√âN√âRER UNE CONVERSATION H√âSITANTE ===
  generateHesitantConversation(scenario, conversationNumber) {
    const conversation = {
      id: `hesitant_${conversationNumber}`,
      scenario: scenario,
      exchanges: [],
      totalExchanges: 20,
      hesitationLevel: this.calculateHesitationLevel(),
      resolution: this.generateResolution(scenario)
    }

    // G√©n√©rer les 20 √©changes
    for (let i = 0; i < 20; i++) {
      const exchange = this.generateExchange(i, conversation, scenario)
      conversation.exchanges.push(exchange)
    }

    return conversation
  }

  // === G√âN√âRER UN √âCHANGE ===
  generateExchange(step, conversation, scenario) {
    const isUserTurn = step % 2 === 0
    const exchangeNumber = Math.floor(step / 2) + 1
    
    if (isUserTurn) {
      return this.generateUserMessage(step, conversation, scenario)
    } else {
      return this.generateAIMessage(step, conversation, scenario)
    }
  }

  // === MESSAGE UTILISATEUR ===
  generateUserMessage(step, conversation, scenario) {
    const userMessages = this.getUserMessageTemplates(step, scenario)
    const selectedMessage = userMessages[Math.floor(Math.random() * userMessages.length)]
    
    return {
      sender: 'user',
      text: selectedMessage,
      step: step,
      hesitation: this.detectHesitation(selectedMessage),
      context: this.extractContext(selectedMessage)
    }
  }

  // === MESSAGE IA ===
  generateAIMessage(step, conversation, scenario) {
    const aiMessages = this.getAIMessageTemplates(step, conversation, scenario)
    const selectedMessage = aiMessages[Math.floor(Math.random() * aiMessages.length)]
    
    return {
      sender: 'ai',
      text: selectedMessage,
      step: step,
      helpfulness: this.calculateHelpfulness(selectedMessage),
      suggestions: this.extractSuggestions(selectedMessage)
    }
  }

  // === TEMPLATES DE MESSAGES UTILISATEUR ===
  getUserMessageTemplates(step, scenario) {
    const baseMessages = {
      restaurant_hesitation: [
        "Je veux manger quelque chose...",
        "Hmm, je ne sais pas quoi...",
        "Tu penses qu'un restaurant ce soir c'est bien ?",
        "Je ne suis pas s√ªr de ce que je veux...",
        "Et si on allait quelque part de diff√©rent ?",
        "Je me demande si c'est une bonne id√©e...",
        "Attends, j'ai chang√© d'avis...",
        "En fait, je pr√©f√®re peut-√™tre...",
        "Je ne sais pas si c'est le bon moment...",
        "Tu crois que c'est trop cher ?",
        "Je h√©site entre plusieurs options...",
        "Et si on essayait autre chose ?",
        "Je ne suis pas s√ªr du style...",
        "Peut-√™tre que c'est mieux demain...",
        "Je me demande si c'est appropri√©...",
        "En fait, j'ai une autre id√©e...",
        "Je ne sais pas combien on sera...",
        "Tu penses que c'est une bonne id√©e ?",
        "Je me demande si c'est trop loin...",
        "Attends, j'ai repens√© √† quelque chose..."
      ],
      yacht_uncertainty: [
        "Je veux un yacht...",
        "Mais je ne sais pas pour combien de personnes...",
        "Hmm, c'est peut-√™tre trop cher...",
        "Tu penses qu'un yacht c'est bien ?",
        "Je ne suis pas s√ªr de la taille...",
        "Et si on prenait quelque chose de plus petit ?",
        "Je me demande si c'est n√©cessaire...",
        "Attends, j'ai chang√© d'avis...",
        "En fait, je pr√©f√®re peut-√™tre...",
        "Je ne sais pas si c'est le bon moment...",
        "Tu crois que c'est trop compliqu√© ?",
        "Je h√©site entre yacht et autre chose...",
        "Et si on essayait autre chose ?",
        "Je ne suis pas s√ªr du budget...",
        "Peut-√™tre que c'est mieux plus tard...",
        "Je me demande si c'est appropri√©...",
        "En fait, j'ai une autre id√©e...",
        "Je ne sais pas combien de temps...",
        "Tu penses que c'est une bonne id√©e ?",
        "Je me demande si c'est trop risqu√©..."
      ],
      villa_doubts: [
        "Je veux une villa...",
        "Mais je ne sais pas pour combien de personnes...",
        "Hmm, c'est peut-√™tre trop grand...",
        "Tu penses qu'une villa c'est bien ?",
        "Je ne suis pas s√ªr de la localisation...",
        "Et si on prenait quelque chose de plus petit ?",
        "Je me demande si c'est n√©cessaire...",
        "Attends, j'ai chang√© d'avis...",
        "En fait, je pr√©f√®re peut-√™tre...",
        "Je ne sais pas si c'est le bon moment...",
        "Tu crois que c'est trop cher ?",
        "Je h√©site entre villa et h√¥tel...",
        "Et si on essayait autre chose ?",
        "Je ne suis pas s√ªr du style...",
        "Peut-√™tre que c'est mieux ailleurs...",
        "Je me demande si c'est appropri√©...",
        "En fait, j'ai une autre id√©e...",
        "Je ne sais pas combien de jours...",
        "Tu penses que c'est une bonne id√©e ?",
        "Je me demande si c'est trop isol√©..."
      ]
    }

    return baseMessages[scenario] || baseMessages.restaurant_hesitation
  }

  // === TEMPLATES DE MESSAGES IA ===
  getAIMessageTemplates(step, conversation, scenario) {
    const aiResponses = {
      restaurant_hesitation: [
        "Je comprends ton h√©sitation ! Laisse-moi t'aider √† trouver quelque chose de parfait...",
        "Pas de probl√®me, c'est normal d'h√©siter ! Qu'est-ce qui te ferait plaisir ?",
        "Je vois que tu r√©fl√©chis... C'est une bonne approche ! Dis-moi ce qui te tente...",
        "Hmm, je comprends ton incertitude. Laisse-moi te proposer quelques options...",
        "C'est tout √† fait normal d'h√©siter ! Je suis l√† pour t'aider √† choisir...",
        "Je vois que tu n'es pas s√ªr... C'est parfait, on va trouver ensemble !",
        "Pas de stress ! Laisse-moi te guider vers quelque chose qui te plaira...",
        "Je comprends ton h√©sitation... C'est important de bien choisir !",
        "C'est normal de r√©fl√©chir ! Dis-moi ce qui te pr√©occupe...",
        "Je vois que tu changes d'avis... C'est parfait, on s'adapte !",
        "Pas de probl√®me ! Laisse-moi te proposer quelque chose de diff√©rent...",
        "Je comprends ton incertitude... On va trouver la solution parfaite !",
        "C'est normal d'h√©siter ! Qu'est-ce qui te ferait vraiment plaisir ?",
        "Je vois que tu r√©fl√©chis... C'est une excellente approche !",
        "Pas de stress ! Laisse-moi t'aider √† clarifier tes envies...",
        "Je comprends ton h√©sitation... On va y aller √©tape par √©tape !",
        "C'est parfait de r√©fl√©chir ! Dis-moi ce qui te pr√©occupe...",
        "Je vois que tu changes d'avis... C'est normal, on s'adapte !",
        "Pas de probl√®me ! Laisse-moi te proposer des alternatives...",
        "Je comprends ton incertitude... On va trouver la solution id√©ale !"
      ],
      yacht_uncertainty: [
        "Je comprends ton h√©sitation ! Un yacht, c'est un investissement important...",
        "Pas de probl√®me, c'est normal d'h√©siter ! Laisse-moi t'aider...",
        "Je vois que tu r√©fl√©chis... C'est une bonne approche ! Dis-moi tes besoins...",
        "Hmm, je comprends ton incertitude. Laisse-moi te proposer quelques options...",
        "C'est tout √† fait normal d'h√©siter ! Je suis l√† pour t'aider √† choisir...",
        "Je vois que tu n'es pas s√ªr... C'est parfait, on va trouver ensemble !",
        "Pas de stress ! Laisse-moi te guider vers quelque chose qui te plaira...",
        "Je comprends ton h√©sitation... C'est important de bien choisir !",
        "C'est normal de r√©fl√©chir ! Dis-moi ce qui te pr√©occupe...",
        "Je vois que tu changes d'avis... C'est parfait, on s'adapte !",
        "Pas de probl√®me ! Laisse-moi te proposer quelque chose de diff√©rent...",
        "Je comprends ton incertitude... On va trouver la solution parfaite !",
        "C'est normal d'h√©siter ! Qu'est-ce qui te ferait vraiment plaisir ?",
        "Je vois que tu r√©fl√©chis... C'est une excellente approche !",
        "Pas de stress ! Laisse-moi t'aider √† clarifier tes envies...",
        "Je comprends ton h√©sitation... On va y aller √©tape par √©tape !",
        "C'est parfait de r√©fl√©chir ! Dis-moi ce qui te pr√©occupe...",
        "Je vois que tu changes d'avis... C'est normal, on s'adapte !",
        "Pas de probl√®me ! Laisse-moi te proposer des alternatives...",
        "Je comprends ton incertitude... On va trouver la solution id√©ale !"
      ],
      villa_doubts: [
        "Je comprends ton h√©sitation ! Une villa, c'est un choix important...",
        "Pas de probl√®me, c'est normal d'h√©siter ! Laisse-moi t'aider...",
        "Je vois que tu r√©fl√©chis... C'est une bonne approche ! Dis-moi tes besoins...",
        "Hmm, je comprends ton incertitude. Laisse-moi te proposer quelques options...",
        "C'est tout √† fait normal d'h√©siter ! Je suis l√† pour t'aider √† choisir...",
        "Je vois que tu n'es pas s√ªr... C'est parfait, on va trouver ensemble !",
        "Pas de stress ! Laisse-moi te guider vers quelque chose qui te plaira...",
        "Je comprends ton h√©sitation... C'est important de bien choisir !",
        "C'est normal de r√©fl√©chir ! Dis-moi ce qui te pr√©occupe...",
        "Je vois que tu changes d'avis... C'est parfait, on s'adapte !",
        "Pas de probl√®me ! Laisse-moi te proposer quelque chose de diff√©rent...",
        "Je comprends ton incertitude... On va trouver la solution parfaite !",
        "C'est normal d'h√©siter ! Qu'est-ce qui te ferait vraiment plaisir ?",
        "Je vois que tu r√©fl√©chis... C'est une excellente approche !",
        "Pas de stress ! Laisse-moi t'aider √† clarifier tes envies...",
        "Je comprends ton h√©sitation... On va y aller √©tape par √©tape !",
        "C'est parfait de r√©fl√©chir ! Dis-moi ce qui te pr√©occupe...",
        "Je vois que tu changes d'avis... C'est normal, on s'adapte !",
        "Pas de probl√®me ! Laisse-moi te proposer des alternatives...",
        "Je comprends ton incertitude... On va trouver la solution id√©ale !"
      ]
    }

    return aiResponses[scenario] || aiResponses.restaurant_hesitation
  }

  // === CALCULER LE NIVEAU D'H√âSITATION ===
  calculateHesitationLevel() {
    return Math.random() * 0.8 + 0.2 // Entre 0.2 et 1.0
  }

  // === D√âTECTER L'H√âSITATION ===
  detectHesitation(message) {
    const hesitationWords = ['h√©site', 'pas s√ªr', 'ne sais pas', 'r√©fl√©chis', 'attends', 'peut-√™tre']
    return hesitationWords.some(word => message.toLowerCase().includes(word))
  }

  // === EXTRAIRE LE CONTEXTE ===
  extractContext(message) {
    const contexts = {
      budget: ['cher', 'prix', 'co√ªt', 'budget'],
      timing: ['ce soir', 'demain', 'maintenant', 'plus tard'],
      group: ['personnes', 'gens', 'groupe', 'nous'],
      location: ['ici', 'l√†', 'marbella', 'centre']
    }
    
    const detectedContexts = []
    for (const [context, keywords] of Object.entries(contexts)) {
      if (keywords.some(keyword => message.toLowerCase().includes(keyword))) {
        detectedContexts.push(context)
      }
    }
    
    return detectedContexts
  }

  // === CALCULER L'UTILIT√â ===
  calculateHelpfulness(message) {
    const helpfulWords = ['aide', 'propose', 'sugg√®re', 'recommandation', 'option']
    const helpfulCount = helpfulWords.filter(word => 
      message.toLowerCase().includes(word)
    ).length
    
    return Math.min(helpfulCount / helpfulWords.length, 1.0)
  }

  // === EXTRAIRE LES SUGGESTIONS ===
  extractSuggestions(message) {
    const suggestions = []
    if (message.includes('propose')) suggestions.push('proposition')
    if (message.includes('recommandation')) suggestions.push('recommandation')
    if (message.includes('option')) suggestions.push('alternative')
    if (message.includes('aide')) suggestions.push('assistance')
    
    return suggestions
  }

  // === G√âN√âRER LA R√âSOLUTION ===
  generateResolution(scenario) {
    const resolutions = {
      restaurant_hesitation: 'R√©servation confirm√©e au restaurant recommand√©',
      yacht_uncertainty: 'Yacht r√©serv√© avec √©quipage complet',
      villa_doubts: 'Villa r√©serv√©e avec services inclus',
      event_planning_confusion: '√âv√©nement organis√© avec succ√®s',
      budget_concerns: 'Solution trouv√©e dans le budget',
      timing_issues: 'Timing optimis√© et confirm√©',
      group_size_changes: 'Capacit√© adapt√©e au groupe',
      preference_changes: 'Pr√©f√©rences mises √† jour',
      location_hesitation: 'Localisation confirm√©e',
      service_uncertainty: 'Services clarifi√©s et r√©serv√©s'
    }
    
    return resolutions[scenario] || 'R√©solution trouv√©e'
  }

  // === G√âN√âRER LES 1000 TESTS ===
  generateAllTests() {
    const allTests = []
    
    for (let i = 1; i <= 1000; i++) {
      const scenario = this.conversationTemplates.scenarios[
        Math.floor(Math.random() * this.conversationTemplates.scenarios.length)
      ]
      
      const conversation = this.generateHesitantConversation(scenario, i)
      allTests.push(conversation)
    }
    
    return allTests
  }

  // === EXPORT DES TESTS ===
  exportTests() {
    const tests = this.generateAllTests()
    
    return {
      totalTests: tests.length,
      scenarios: this.conversationTemplates.scenarios,
      averageHesitation: tests.reduce((sum, test) => sum + test.hesitationLevel, 0) / tests.length,
      tests: tests
    }
  }
}

// === INSTANCE GLOBALE ===
export const hesitantGenerator = new HesitantConversationGenerator()
