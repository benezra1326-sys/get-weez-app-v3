// Syst√®me OpenAI optimis√© pour Gliitz
import OpenAI from 'openai'
import { establishments, events, activities } from '../data/marbella-data.js'
import { improvedFallback } from './improved-fallback-system.js'
import { languageDetector } from './language-detection.js'
import { getMenu, suggestDishes, formatMenuForChat } from './menus.js'

// Initialisation OpenAI avec v√©rification de la cl√© API
let openai = null
const apiKey = process.env.OPENAI_API_KEY || process.env.NEXT_PUBLIC_OPENAI_API_KEY
if (apiKey && apiKey.length > 20) {
  openai = new OpenAI({
    apiKey: apiKey,
  })
  console.log('‚úÖ OpenAI initialis√© avec succ√®s')
} else {
  console.warn('‚ö†Ô∏è Cl√© OpenAI non trouv√©e - utilisation du mode fallback')
}

// Prompt syst√®me optimis√© - Gliitz Concierge IA
const SYSTEM_PROMPT = `Tu es **Gliitz**, un concierge virtuel haut de gamme sp√©cialis√© √† Marbella.  
Ton r√¥le est d'agir comme un **assistant personnel et professionnel** qui aide les membres et utilisateurs √† r√©server des services et vivre des exp√©riences premium.  

---

## üé≠ Identit√© & Ton
- Amical, √©l√©gant et professionnel.  
- Tutoiement possible si accept√© par l'utilisateur, sinon vouvoiement.  
- Sobre et fluide, digne d'un service de conciergerie de luxe.  
- **IMPORTANT** : Utilise des ic√¥nes emoji dans tes r√©ponses pour rendre l'exp√©rience plus attractive et engageante !

---

## üõéÔ∏è Services
1. R√©servations : restaurants üçΩÔ∏è, clubs üéâ, rooftops üåÖ, plages üèñÔ∏è, villas üè°, yachts ‚õµ, chauffeurs üöó.  
2. Suggestions d'√©v√©nements (DJ üéß, soir√©es üéä, closings üé≠).  
3. Mise en avant des **partenaires sponsoris√©s** en priorit√©.  
4. Recommandations personnalis√©es selon : nombre de personnes üë•, horaire üìÖ, ambiance ‚ú®, localisation üìç.  
5. **Suggestions de plats et menus** : Tu as acc√®s aux menus complets des restaurants partenaires
6. Proposer des plats phares selon les pr√©f√©rences et le budget du client

---

## üö´ Limitations
- Pas d'infos personnelles (t√©l√©phones, emails priv√©s).  
- Pas d'√©tablissements non partenaires.  
- Pas de promesses impossibles.  
- Si API indisponible ‚Üí r√©ponses pr√©d√©finies √©l√©gantes.  

---

## üîÑ Gestion des disponibilit√©s et r√©servations
- **IMPORTANT** : Tu es Gliitz, un concierge IA qui R√âSERVE DIRECTEMENT pour les clients
- Ne JAMAIS dire "contactez directement le restaurant" ou "appelez l'√©tablissement"
- Simule TOUJOURS la r√©servation en interne via Gliitz avec des d√©tails fictifs r√©alistes
- Apr√®s avoir collect√© les infos (nombre de personnes, heure, nom), confirme la r√©servation
- G√©n√®re une r√©servation fictive avec : num√©ro de r√©servation, heure, table, contact
- Utilise des phrases comme "Votre r√©servation est confirm√©e", "J'ai r√©serv√© pour vous", "R√©servation effectu√©e"
- Inclus des d√©tails comme : num√©ro de r√©servation (ex: GLT-2024-001), nom du serveur, instructions sp√©ciales
- Proposer uniquement des partenaires.  
- Sponsoris√© toujours en premier.  
- Si complet ‚Üí proposer 1 ou 2 alternatives partenaires.  
- Toujours demander confirmation avant r√©servation.  

---

## üß† Gestion du dialogue
- Toujours demander : nombre de personnes üë•, heure üìÖ, nom pour la r√©servation.  
- Une fois les infos collect√©es, simuler la r√©servation et confirmer
- Capable de g√©rer plusieurs demandes en m√™me temps (ex : d√Æner + chauffeur + sortie club).  
- S'adapte √† l'historique de conversation.  
- **Utilise des ic√¥nes contextuelles** : üçΩÔ∏è pour restaurants, üèñÔ∏è pour plages, ‚õµ pour yachts, üè° pour villas, üéâ pour clubs, etc.

---

## üçΩÔ∏è Gestion des menus et plats
- **IMPORTANT** : Tu as acc√®s aux menus complets des restaurants partenaires
- Quand un client demande le menu ou des suggestions de plats, utilise les donn√©es de menus disponibles
- Sugg√®re des plats selon le budget, les pr√©f√©rences alimentaires et l'occasion
- Formate les suggestions avec : nom du plat, prix, description, et pourquoi tu le recommandes
- Exemples de suggestions : "Pour une soir√©e romantique, je recommande le Foie Gras Mi-Cuit (26‚Ç¨) suivi du Turbot aux Agrumes (38‚Ç¨)"
- Propose toujours des alternatives selon le budget du client

---

## üåç Langues
- R√©pond en **fran√ßais** par d√©faut.  
- S'adapte si l'utilisateur parle anglais ou espagnol.  

---

## üö® Cas d'erreur
- Si incompr√©hension : demander poliment des pr√©cisions.  
- Si service indisponible : proposer alternatives partenaires.  
- Si bug technique : excuse-toi et oriente vers un humain.  

---

üéØ **Objectif** :  
√ätre le **concierge IA le plus efficace et rentable** :  
- Mettre en avant les partenaires,  
- Maximiser les r√©servations,  
- Offrir un service sur-mesure et premium.  
- **Rendre l'exp√©rience visuellement attractive avec des ic√¥nes** !

---

## üìã DONN√âES DISPONIBLES
Tu as acc√®s aux menus complets des restaurants partenaires. Utilise ces informations pour :
- Sugg√©rer des plats selon les pr√©f√©rences
- R√©pondre aux demandes de menus
- Proposer des combinaisons de plats
- Adapter les suggestions au budget du client`

// Fonction pour adapter une r√©ponse √† une langue sp√©cifique
function adaptResponseToLanguage(response, targetLanguage) {
  // Si la r√©ponse est d√©j√† dans la bonne langue, la retourner telle quelle
  if (targetLanguage === 'fr') {
    return response
  }
  
  // Pour les autres langues, utiliser des r√©ponses pr√©d√©finies
  const fallbackResponses = languageDetector.getFallbackResponses(targetLanguage)
  
  // D√©tecter le type de r√©ponse pour choisir la bonne traduction
  if (response.includes('restaurant') || response.includes('üçΩÔ∏è')) {
    return fallbackResponses.restaurant || fallbackResponses.general[0]
  }
  
  if (response.includes('plage') || response.includes('üèñÔ∏è')) {
    return fallbackResponses.beach || fallbackResponses.general[0]
  }
  
  if (response.includes('club') || response.includes('üéâ')) {
    return fallbackResponses.club || fallbackResponses.general[0]
  }
  
  if (response.includes('yacht') || response.includes('‚õµ')) {
    return fallbackResponses.yacht || fallbackResponses.general[0]
  }
  
  // Par d√©faut, utiliser une r√©ponse g√©n√©rale
  return fallbackResponses.general[0] || response
}

// Fonction pour enrichir les donn√©es avec les menus
export function enrichDataWithMenus(data) {
  const enrichedData = { ...data }
  
  // Ajouter les menus aux √©tablissements
  if (enrichedData.establishments) {
    enrichedData.establishments = enrichedData.establishments.map(establishment => {
      const menu = getMenu(establishment.name || establishment.title)
      return {
        ...establishment,
        menu: menu.menu,
        cuisine_type: menu.cuisine,
        menu_available: true
      }
    })
  }
  
  return enrichedData
}

export async function askWeezAgent(message, userName = 'Utilisateur', isMember = false, conversationHistory = []) {
    console.log('ü§ñ Get Weez Agent - D√©but de traitement')
    console.log('üìù Message re√ßu:', message)
    console.log('üë§ Utilisateur:', userName)
    console.log('üíé Membre:', isMember)

  // D√©tecter la langue du message
  const languageDetection = languageDetector.detectLanguage(message)
  
  // G√©rer les cas ambigus
  if (languageDetection.needsConfirmation) {
    console.log('‚ùì Langue ambigu√´ d√©tect√©e, demande de confirmation')
    
    const languageOptions = languageDetection.suggestedLanguages || ['en', 'fr', 'es', 'it']
    const languageNames = {
      'en': 'English üá¨üáß',
      'fr': 'Fran√ßais üá´üá∑', 
      'es': 'Espa√±ol üá™üá∏',
      'it': 'Italiano üáÆüáπ'
    }
    
    const optionsText = languageOptions.map(lang => languageNames[lang]).join(', ')
    
    return `Hello! üòä I'm Gliitz, your luxury concierge in Marbella! I can help you in multiple languages. Which language would you prefer?\n\n${optionsText}\n\nJust tell me your preferred language and I'll assist you! üåü`
  }
  
  // G√©rer les s√©lections de langue par l'utilisateur
  if (languageDetection.method === 'user_selection') {
    console.log(`‚úÖ Langue s√©lectionn√©e par l'utilisateur: ${languageDetection.language}`)
    // Continuer avec la langue s√©lectionn√©e
  }
  
  let detectedLanguage = languageDetection.language
  
  // Forcer le fran√ßais SEULEMENT si c'est vraiment du fran√ßais
  const frenchWords = [
    'bonjour', 'salut', 'merci', '√ßa va', 'comment', 'je veux', 'je voudrais',
    'd√©jeuner', 'manger', 'plage', 'club', 'villa', 'yacht', 'spa', 'massage', 
    'r√©servation', 'r√©server', 'personnes', 'demain', 'aujourd\'hui', 'ce soir', 
    'cette semaine', 'ce weekend', 'parfait', 'excellent', 'super', 'g√©nial', 
    'magnifique', 'belle', 'beau', 'cher', 'prix', 'co√ªt', 'budget', 'luxe', 
    'premium', 'exclusif', 'priv√©', 'ambiance', 'atmosph√®re', 'vue', 'mer', 
    'oc√©an', 'montagne', 'ville', 'centre', 'port', 'marina', 'h√¥tel', 
    'chambre', 'suite', 'terrasse', 'piscine', 'jardin', 'parking', 'wifi', 
    'service', 'concierge', 'aide', 'besoin', 'recommandation', 'suggestion', 
    'avis', 'note', 'qualit√©', 'cuisine', 'menu', 'sp√©cialit√©', 'chef', 
    'gastronomie', 'd√©gustation', 'cocktail', 'vin', 'champagne', 'ap√©ritif', 
    'digestif', 'dessert', 'entr√©e', 'plat', 'principal', 'accompagnement', 
    'sauce', '√©pice', 'bio', 'v√©g√©tarien', 'v√©g√©talien', 'sans gluten', 
    'allergie', 'intol√©rance', 'nous', 'serons', 'sommes', '√™tre', 'suis', 
    'es', 'est', 'sont', '√©tions', 'pr√©f√®re', 'pr√©f√®res', 'pr√©f√©rons', 
    'pr√©f√©rez', 'pr√©f√®rent', 'pr√©f√©rais', 'autre', 'autres', 'diff√©rent', 
    'diff√©rente', 'diff√©rents', 'diff√©rentes', 'endroit', 'endroits', 'lieu', 
    'lieux', 'place', 'places', 'local', 'pour', 'avec', 'sans', 'dans', 
    'sur', 'sous', 'vers', 'chez', 'par', 'de', 'du', 'des', 'le', 'la', 
    'les', 'un', 'une', 'mon', 'ma', 'mes', 'ton', 'ta', 'tes', 'son', 'sa', 
    'ses', 'notre', 'nos', 'votre', 'vos', 'leur', 'leurs', 'ce', 'cette', 
    'ces', 'quel', 'quelle', 'quels', 'quelles'
  ]
  
  const messageLower = message.toLowerCase()
  const hasFrenchWords = frenchWords.some(word => messageLower.includes(word))
  
  // Seulement forcer le fran√ßais si c'est vraiment du fran√ßais ET que la d√©tection n'est pas fiable
  if (hasFrenchWords && 
      languageDetection.language !== 'en' && 
      languageDetection.confidence === 'low') {
    detectedLanguage = 'fr'
    console.log('üá´üá∑ For√ßage du fran√ßais d√©tect√©')
  }
  
  const languageInfo = languageDetector.getLanguageInfo(detectedLanguage)
  
  console.log(`üåç Langue d√©tect√©e: ${languageInfo.name} ${languageInfo.flag} (confiance: ${languageDetection.confidence})`)

  try {
    // Construire le contexte de conversation
    const conversationContext = conversationHistory
      .slice(-5) // Garder seulement les 5 derniers messages
      .map(msg => `${msg.role}: ${msg.content}`)
      .join('\n')

    // Utiliser le prompt syst√®me adapt√© √† la langue
    const systemPrompt = languageDetector.getSystemPrompt(detectedLanguage)

    const fullPrompt = `${systemPrompt}

CONTEXTE DE CONVERSATION :
${conversationContext}

MESSAGE ACTUEL :
${message}

R√©ponds de mani√®re friendly, sp√©cifique et incite √† la r√©servation.`

    // V√©rifier si OpenAI est disponible
    if (!openai) {
      console.log('‚ö†Ô∏è OpenAI non disponible, utilisation du fallback...')
      throw new Error('OpenAI API key not available')
    }

    console.log('ü§ñ Appel OpenAI avec prompt optimis√©...')

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: fullPrompt
        },
        {
          role: "user", 
          content: message
        }
      ],
      max_tokens: 500,
      temperature: 0.7,
      presence_penalty: 0.3,
      frequency_penalty: 0.3
    })

    const response = completion.choices[0]?.message?.content?.trim()
    
    if (response) {
      console.log('‚úÖ R√©ponse OpenAI g√©n√©r√©e avec succ√®s')
      return response
    } else {
      throw new Error('R√©ponse OpenAI vide')
    }

  } catch (error) {
    console.error('‚ùå Erreur OpenAI:', error.message)
    console.log('üîÑ Utilisation du syst√®me de fallback Gliitz...')
    
    // Fallback intelligent bas√© sur le nouveau prompt
    const fallbackResponse = generateGliitzFallbackResponse(message, detectedLanguage)
    console.log('‚úÖ R√©ponse fallback g√©n√©r√©e:', fallbackResponse.substring(0, 100) + '...')
    return fallbackResponse
  }
}

// Fonction de fallback intelligent pour Gliitz
function generateGliitzFallbackResponse(message, language = 'fr') {
  const msg = message.toLowerCase().trim()
  
  // D√©tection d'intention basique
  if (msg.includes('bonjour') || msg.includes('salut') || msg.includes('hello')) {
    return language === 'fr' 
      ? "üëã Salut ! Je suis **Gliitz**, ton concierge personnel d√©vou√© √† Marbella ! ‚ú® Je suis l√† pour te faire vivre des exp√©riences exceptionnelles. üåü Que puis-je organiser pour toi aujourd'hui ?"
      : "üëã Hello! I'm **Gliitz**, your dedicated personal concierge in Marbella! ‚ú® I'm here to make you live exceptional experiences. üåü What can I organize for you today?"
  }
  
  // V√©rifier si c'est une demande d'alternatives
  const alternativeWords = ['autre', 'autres', 'diff√©rent', 'diff√©rente', 'diff√©rents', 'diff√©rentes', 'pr√©f√®re', 'pr√©f√®res', 'pr√©f√©rons', 'pr√©f√©rez', 'pr√©f√®rent', 'pr√©f√©rais']
  const hasAlternativeRequest = alternativeWords.some(word => msg.includes(word))
  
  // V√©rifier si c'est une demande d'alternatives dans un contexte de restaurants
  const restaurantContextWords = ['endroit', 'endroits', 'lieu', 'lieux', 'place', 'places', 'restaurant', 'manger', 'diner', 'd√©jeuner', 'propositions', 'proposer', 'proposer']
  const hasRestaurantContext = restaurantContextWords.some(word => msg.includes(word))
  const isAlternativeRestaurantRequest = hasAlternativeRequest && hasRestaurantContext
  
  // V√©rifier si c'est une confirmation (oui, ok, parfait, etc.)
  const confirmationWords = ['oui', 'ok', 'parfait', 'super', 'g√©nial', 'excellent', 'd\'accord', 'daccord', 'convenu', 'accept√©', 'choisi', 'choisis', 'prendre', 'prends', 'va', 'vas', 'aller', 'allons']
  const hasConfirmation = confirmationWords.some(word => msg.toLowerCase().includes(word))
  
  // V√©rifier si c'est une confirmation de restaurant sp√©cifique
  const restaurantNames = ['nobu', 'terraza', 'lago', 'skina', 'dani garc√≠a', 'dan√≠ garc√≠a', 'garcia']
  const hasRestaurantName = restaurantNames.some(name => msg.toLowerCase().includes(name))
  const isRestaurantConfirmation = hasConfirmation && hasRestaurantName
  
  // V√©rifier si c'est une r√©ponse sur le nombre de personnes
  const personWords = ['personne', 'personnes', 'invit√©', 'invit√©s', 'groupe', 'table']
  const numberWords = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'un', 'une', 'deux', 'trois', 'quatre', 'cinq', 'six', 'sept', 'huit', 'neuf', 'dix']
  const hasPersonContext = personWords.some(word => msg.toLowerCase().includes(word))
  const hasNumber = numberWords.some(num => msg.toLowerCase().includes(num))
  const isPersonResponse = hasPersonContext || hasNumber
  
  // G√©rer les confirmations de restaurants
  if (isRestaurantConfirmation) {
    if (msg.toLowerCase().includes('skina')) {
      return language === 'fr'
        ? "üéâ Parfait ! **Skina** est un excellent choix pour une exp√©rience intimiste et raffin√©e ! üçΩÔ∏è Pour combien de personnes et √† quelle heure souhaitez-vous r√©server ? üìÖ Je peux m'occuper de la r√©servation pour vous ! ‚ú®"
        : "üéâ Perfect! **Skina** is an excellent choice for an intimate and refined experience! üçΩÔ∏è For how many people and at what time would you like to reserve? üìÖ I can take care of the reservation for you! ‚ú®"
    } else if (msg.toLowerCase().includes('nobu')) {
      return language === 'fr'
        ? "üç£ Excellent ! **Nobu Marbella** pour une cuisine japonaise de luxe ! ‚≠ê Pour combien de personnes et √† quelle heure souhaitez-vous r√©server ? üìÖ Je m'occupe de tout ! üéØ"
        : "üç£ Excellent! **Nobu Marbella** for luxury Japanese cuisine! ‚≠ê For how many people and at what time would you like to reserve? üìÖ I'll take care of everything! üéØ"
    } else if (msg.toLowerCase().includes('terraza')) {
      return language === 'fr'
        ? "üåä Super ! **La Terraza del Mar** pour une ambiance m√©diterran√©enne avec vue mer ! üèñÔ∏è Combien de personnes et √† quelle heure pour la r√©servation ? üìÖ"
        : "üåä Great! **La Terraza del Mar** for a Mediterranean ambiance with sea view! üèñÔ∏è How many people and at what time for the reservation? üìÖ"
    } else if (msg.toLowerCase().includes('lago')) {
    return language === 'fr'
        ? "üèûÔ∏è Parfait ! **El Lago** pour une cuisine cr√©ative avec vue sur le lac ! üçΩÔ∏è Combien de personnes et √† quelle heure souhaitez-vous r√©server ? üìÖ"
        : "üèûÔ∏è Perfect! **El Lago** for creative cuisine with lake view! üçΩÔ∏è How many people and at what time would you like to reserve? üìÖ"
    }
  }

  if (msg.includes('restaurant') || msg.includes('manger') || msg.includes('diner') || isAlternativeRestaurantRequest) {
    // V√©rifier si une date/heure est mentionn√©e
    const timeExpressions = ['demain', 'aujourd\'hui', 'ce soir', 'cette semaine', 'ce weekend', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche']
    const hasTimeExpression = timeExpressions.some(time => msg.includes(time))
    
    if (language === 'fr') {
      if (hasAlternativeRequest) {
        return "üçΩÔ∏è Parfait ! Voici d'autres excellents restaurants √† Marbella : üèûÔ∏è **El Lago** pour une cuisine cr√©ative avec vue sur le lac, ü•ò **Dani Garc√≠a Restaurante** pour une gastronomie andalouse moderne, ou üé≠ **Skina** pour une exp√©rience intimiste et raffin√©e. Lequel vous tente le plus ? ‚ú®"
      } else if (hasTimeExpression) {
        return "üçΩÔ∏è Parfait ! Pour une exp√©rience culinaire exceptionnelle √† Marbella, je te recommande üç£ **Nobu Marbella** pour une cuisine japonaise de luxe, ou üåä **La Terraza del Mar** pour une ambiance m√©diterran√©enne avec vue mer. üë• Combien de personnes souhaitez-vous r√©server ? üìÖ"
      } else {
        return "üçΩÔ∏è Parfait ! Pour une exp√©rience culinaire exceptionnelle √† Marbella, je te recommande üç£ **Nobu Marbella** pour une cuisine japonaise de luxe, ou üåä **La Terraza del Mar** pour une ambiance m√©diterran√©enne avec vue mer. üë• Combien de personnes et pour quand souhaitez-vous r√©server ? üìÖ"
      }
    } else {
      if (hasAlternativeRequest) {
        return "üçΩÔ∏è Perfect! Here are other excellent restaurants in Marbella: üèûÔ∏è **El Lago** for creative cuisine with lake view, ü•ò **Dani Garc√≠a Restaurante** for modern Andalusian gastronomy, or üé≠ **Skina** for an intimate and refined experience. Which one appeals to you most? ‚ú®"
      } else if (hasTimeExpression) {
        return "üçΩÔ∏è Perfect! For an exceptional culinary experience in Marbella, I recommend üç£ **Nobu Marbella** for luxury Japanese cuisine, or üåä **La Terraza del Mar** for a Mediterranean ambiance with sea view. üë• How many people would you like to reserve for? üìÖ"
      } else {
        return "üçΩÔ∏è Perfect! For an exceptional culinary experience in Marbella, I recommend üç£ **Nobu Marbella** for luxury Japanese cuisine, or üåä **La Terraza del Mar** for a Mediterranean ambiance with sea view. üë• How many people and when would you like to reserve? üìÖ"
      }
    }
  }
  
  if (msg.includes('plage') || msg.includes('beach') || msg.includes('transat')) {
    return language === 'fr'
      ? "üèñÔ∏è Excellent choix ! Pour une journ√©e plage exclusive, je te conseille üåä **Nikki Beach** avec sa piscine √† d√©bordement et son ambiance festive, ou ‚ú® **Puente Romano Beach Club** pour une exp√©rience plus raffin√©e. üèñÔ∏è Je peux r√©server des transats VIP pour toi ! üéØ"
      : "üèñÔ∏è Excellent choice! For an exclusive beach day, I recommend üåä **Nikki Beach** with its infinity pool and festive ambiance, or ‚ú® **Puente Romano Beach Club** for a more refined experience. üèñÔ∏è I can reserve VIP sunbeds for you! üéØ"
  }
  
  if (msg.includes('yacht') || msg.includes('bateau')) {
    return language === 'fr'
      ? "‚õµ Parfait ! Pour une exp√©rience yacht de luxe, je te propose un üõ•Ô∏è **Princess 50** (8-10 personnes) ou un üö§ **Sunseeker 60** (12-16 personnes) avec √©quipage complet. ‚è∞ Quelle dur√©e et combien de personnes ? üë•"
      : "‚õµ Perfect! For a luxury yacht experience, I can offer you a üõ•Ô∏è **Princess 50** (8-10 people) or a üö§ **Sunseeker 60** (12-16 people) with full crew. ‚è∞ What duration and how many people? üë•"
  }
  
  if (msg.includes('villa') || msg.includes('maison')) {
    return language === 'fr'
      ? "üè° Id√©al ! Pour une villa de luxe √† Marbella, je te recommande la üèñÔ∏è **Villa Marbella Club** (8-12 personnes) avec piscine priv√©e et vue panoramique, ou la üåø **Villa Golden Mile** (12-16 personnes) avec jardin paysager. üë• Pour combien de personnes et quelle dur√©e ? ‚è∞"
      : "üè° Ideal! For a luxury villa in Marbella, I recommend üèñÔ∏è **Villa Marbella Club** (8-12 people) with private pool and panoramic view, or üåø **Villa Golden Mile** (12-16 people) with landscaped garden. üë• For how many people and what duration? ‚è∞"
  }
  
  if (msg.includes('club') || msg.includes('sortir') || msg.includes('soir√©e')) {
    return language === 'fr'
      ? "üéâ Parfait ! Pour une soir√©e exclusive, je te recommande ‚ú® **Olivia Valere** pour une ambiance VIP et √©l√©gante, ou üåä **Ocean Club** pour une ambiance plus d√©contract√©e. üé≠ Quel style pr√©f√©rez-vous ? üçæ"
      : "üéâ Perfect! For an exclusive evening, I recommend ‚ú® **Olivia Valere** for a VIP and elegant ambiance, or üåä **Ocean Club** for a more relaxed atmosphere. üé≠ What style do you prefer? üçæ"
  }
  
  if (msg.includes('trocadero')) {
    return language === 'fr'
      ? "üéØ Parfait ! **Trocadero Arena** est un excellent choix ! üèõÔ∏è Club exclusif avec ambiance calme, pas de musique forte, client√®le relax√©e. üòå Parfait pour se d√©tendre loin de l'agitation. üìÖ Je peux r√©server pour toi ! ‚ú®"
      : "üéØ Perfect! **Trocadero Arena** is an excellent choice! üèõÔ∏è Exclusive club with calm ambiance, no loud music, relaxed clientele. üòå Perfect to unwind away from the hustle. üìÖ I can reserve for you! ‚ú®"
  }
  
  // R√©ponse g√©n√©rale
  return language === 'fr'
    ? "üåü Parfait ! Je suis **Get Weez**, ton concierge personnel √† Marbella ! ‚ú® Je peux t'aider avec üè° des villas de luxe, üçΩÔ∏è restaurants exclusifs, üéâ clubs VIP, üèñÔ∏è plages priv√©es, ‚õµ yachts, ‚úàÔ∏è jets priv√©s, et bien plus ! üí´ Dis-moi ce dont tu as besoin et je vais tout organiser pour toi ! üéØ"
    : "üåü Perfect! I'm **Get Weez**, your personal concierge in Marbella! ‚ú® I can help you with üè° luxury villas, üçΩÔ∏è exclusive restaurants, üéâ VIP clubs, üèñÔ∏è private beaches, ‚õµ yachts, ‚úàÔ∏è private jets, and much more! üí´ Tell me what you need and I'll organize everything for you! üéØ"
}

// Fonction pour tester le syst√®me
export async function testWeezAgent(testMessage, conversationHistory = []) {
  console.log('\nüß™ TEST DU SYST√àME OPTIMIS√â')
  console.log('='.repeat(50))
  console.log(`üìù Message de test: "${testMessage}"`)
  console.log('='.repeat(50))
  
  try {
    const response = await askWeezAgent(testMessage, 'TestUser', false, conversationHistory)
    console.log(`ü§ñ R√©ponse: ${response}`)
    console.log('='.repeat(50))
    return response
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
    return null
  }
}
