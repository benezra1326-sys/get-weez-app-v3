name: 🤖 Automated Code Review

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ main ]

jobs:
  # Analyse statique du code
  code-analysis:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: 📋 Install dependencies
      run: npm ci
    
    - name: 🔍 ESLint Analysis
      run: |
        npm run lint -- --format json --output-file eslint-report.json || true
        echo "ESLint analysis completed"
    
    - name: 🎨 Prettier Check
      run: npm run prettier:check || echo "Prettier issues found"
    
    - name: 📈 Bundle Size Analysis
      run: |
        npm run build
        npx webpack-bundle-analyzer build/static/js/*.js --report --mode json --out bundle-report.json
      continue-on-error: true

  # Tests et couverture
  testing:
    name: 🧪 Testing & Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: 📋 Install dependencies
      run: npm ci
    
    - name: 🧪 Run tests
      run: npm test -- --coverage --watchAll=false
    
    - name: 📊 Coverage Report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  # Analyse de performance
  performance-audit:
    name: ⚡ Performance Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: 📋 Install dependencies
      run: npm ci
    
    - name: 🏗️ Build project
      run: npm run build
    
    - name: ⚡ Lighthouse Audit
      uses: treosh/lighthouse-ci-action@v9
      with:
        configPath: './.lighthouserc.json'
        temporaryPublicStorage: true
        uploadArtifacts: true

  # Analyse de sécurité
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3
    
    - name: 🔍 Run npm audit
      run: npm audit --audit-level moderate
      continue-on-error: true
    
    - name: 🛡️ Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

  # Review automatique avec AI
  ai-code-review:
    name: 🤖 AI Code Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: 🤖 AI Code Review
      uses: coderabbitai/openai-pr-reviewer@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      with:
        debug: false
        review_simple_changes: false
        review_comment_lgtm: false
        openai_light_model: gpt-3.5-turbo
        openai_heavy_model: gpt-4
        path_filters: |
          !dist/**
          !build/**
          !node_modules/**
          !*.min.js
          !*.lock
        system_message: |
          You are @GetWeezAI, a code review assistant for Get Weez platform.
          Focus on:
          - Performance optimizations for React components
          - Security vulnerabilities
          - Code maintainability and readability
          - Best practices for Next.js applications
          - Accessibility (a11y) concerns
          - Bundle size optimizations
          Be concise but thorough in your reviews.

  # Commentaires automatiques sur PR
  pr-comments:
    name: 💬 PR Analysis Comments
    runs-on: ubuntu-latest
    needs: [code-analysis, testing, performance-audit]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3
    
    - name: 💬 Post PR Comment
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo, number } = context.issue;
          
          // Analyse des métriques
          const metrics = {
            linting: '${{ needs.code-analysis.result }}' === 'success' ? '✅' : '❌',
            tests: '${{ needs.testing.result }}' === 'success' ? '✅' : '❌',
            performance: '${{ needs.performance-audit.result }}' === 'success' ? '✅' : '❌'
          };
          
          const comment = `
          ## 🤖 Analyse Automatique du Code
          
          ### 📊 Résultats
          - **Linting**: ${metrics.linting} ESLint + Prettier
          - **Tests**: ${metrics.tests} Tests unitaires + couverture
          - **Performance**: ${metrics.performance} Audit Lighthouse
          
          ### 🚀 Recommandations
          ${metrics.linting === '❌' ? '- 🔍 Corriger les erreurs de linting détectées\n' : ''}
          ${metrics.tests === '❌' ? '- 🧪 Corriger les tests en échec\n' : ''}
          ${metrics.performance === '❌' ? '- ⚡ Optimiser les performances détectées\n' : ''}
          
          ### 📈 Métriques Détaillées
          Consultez les onglets **Checks** pour plus de détails sur chaque analyse.
          
          ---
          *Review automatique par @GetWeezAI* 🤖
          `;
          
          github.rest.issues.createComment({
            owner,
            repo,
            issue_number: number,
            body: comment
          });

  # Déploiement conditionnel
  deploy-preview:
    name: 🚀 Deploy Preview
    runs-on: ubuntu-latest
    needs: [code-analysis, testing]
    if: github.event_name == 'pull_request' && needs.code-analysis.result == 'success' && needs.testing.result == 'success'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3
    
    - name: 🚀 Deploy to Vercel Preview
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        scope: ${{ secrets.VERCEL_ORG_ID }}