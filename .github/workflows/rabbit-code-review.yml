# 🤖 Workflow GitHub Actions pour Reviews Automatiques avec Rabbit
# Get Weez - Optimisation ChatInterface

name: 🐰 Rabbit Code Review & Quality Check

# Déclencheurs
on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
    paths:
      - 'components/**/*.js'
      - 'hooks/**/*.js'
      - 'contexts/**/*.js'
      - 'pages/**/*.js'
  
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'components/**/*.js'
      - 'hooks/**/*.js'
      - 'contexts/**/*.js'
      - 'pages/**/*.js'

# Variables d'environnement
env:
  NODE_VERSION: '18'
  RABBIT_CONFIG_PATH: '.rabbit/config.yml'

# Jobs
jobs:
  # ==========================================
  # JOB 1: ANALYSE STATIQUE AVEC RABBIT
  # ==========================================
  rabbit-analysis:
    name: 🔍 Rabbit Static Analysis
    runs-on: ubuntu-latest
    
    outputs:
      analysis-result: ${{ steps.rabbit-scan.outputs.result }}
      severity-score: ${{ steps.rabbit-scan.outputs.severity }}
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for better analysis
          
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: |
          npm ci --only=production
          npm install --save-dev @rabbit-ai/cli
          
      - name: 🤖 Run Rabbit Analysis
        id: rabbit-scan
        run: |
          # Analyse avec Rabbit
          npx rabbit-scan \
            --config ${{ env.RABBIT_CONFIG_PATH }} \
            --format json \
            --output rabbit-report.json \
            --verbose
            
          # Extraire les métriques
          SEVERITY=$(jq -r '.summary.severity_score' rabbit-report.json)
          RESULT=$(jq -r '.summary.status' rabbit-report.json)
          
          echo "result=$RESULT" >> $GITHUB_OUTPUT
          echo "severity=$SEVERITY" >> $GITHUB_OUTPUT
          
          # Afficher le résumé
          echo "## 🤖 Rabbit Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: $RESULT" >> $GITHUB_STEP_SUMMARY
          echo "- **Severity Score**: $SEVERITY" >> $GITHUB_STEP_SUMMARY
          
      - name: 📊 Generate Detailed Report
        run: |
          # Générer un rapport HTML pour les artefacts
          npx rabbit-report \
            --input rabbit-report.json \
            --format html \
            --output rabbit-detailed-report.html
            
      - name: 📎 Upload Analysis Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rabbit-analysis-reports
          path: |
            rabbit-report.json
            rabbit-detailed-report.html
            
      - name: 💬 Comment PR with Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('rabbit-report.json', 'utf8'));
            
            const comment = `
            ## 🤖 Rabbit Code Review Results
            
            ### 📊 Summary
            - **Overall Status**: ${report.summary.status === 'passed' ? '✅ PASSED' : '❌ FAILED'}
            - **Severity Score**: ${report.summary.severity_score}/10
            - **Files Analyzed**: ${report.summary.files_count}
            - **Rules Checked**: ${report.summary.rules_count}
            
            ### 🎯 Key Metrics
            | Metric | Value | Status |
            |--------|-------|--------|
            | Errors | ${report.summary.errors} | ${report.summary.errors === 0 ? '✅' : '❌'} |
            | Warnings | ${report.summary.warnings} | ${report.summary.warnings < 5 ? '✅' : '⚠️'} |
            | Code Quality | ${report.summary.quality_score}/10 | ${report.summary.quality_score >= 8 ? '✅' : '⚠️'} |
            | Performance | ${report.summary.performance_score}/10 | ${report.summary.performance_score >= 8 ? '✅' : '⚠️'} |
            
            ### 🔍 Top Issues Found
            ${report.issues.slice(0, 5).map(issue => 
              `- **${issue.severity.toUpperCase()}**: ${issue.message} \`${issue.file}:${issue.line}\``
            ).join('\n')}
            
            ### 📈 Improvement Suggestions
            ${report.suggestions.slice(0, 3).map(suggestion => 
              `- ${suggestion.description}`
            ).join('\n')}
            
            <details>
            <summary>📋 Full Report</summary>
            
            Download the detailed HTML report from the workflow artifacts.
            
            </details>
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # ==========================================
  # JOB 2: CHECKS SPÉCIFIQUES CHATINTERFACE
  # ==========================================
  chatinterface-specific-checks:
    name: 🎯 ChatInterface Specific Analysis
    runs-on: ubuntu-latest
    needs: rabbit-analysis
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔍 Check ChatInterface File Size
        run: |
          CHATINTERFACE_FILE="components/chat/ChatInterface.js"
          
          if [ -f "$CHATINTERFACE_FILE" ]; then
            LINE_COUNT=$(wc -l < "$CHATINTERFACE_FILE")
            echo "ChatInterface.js has $LINE_COUNT lines"
            
            if [ $LINE_COUNT -gt 200 ]; then
              echo "::error::ChatInterface.js is too large ($LINE_COUNT lines). Should be < 200 lines."
              echo "::error::Consider refactoring into smaller components."
              exit 1
            else
              echo "::notice::ChatInterface.js size is optimal ($LINE_COUNT lines)"
            fi
          fi
          
      - name: 🚫 Check for Console Logs
        run: |
          CONSOLE_LOGS=$(grep -n "console\." components/chat/ChatInterface.js || true)
          
          if [ -n "$CONSOLE_LOGS" ]; then
            echo "::error::Console logs found in ChatInterface.js:"
            echo "$CONSOLE_LOGS"
            echo "::error::Remove console logs or use conditional logging"
            exit 1
          else
            echo "::notice::No console logs found - Good!"
          fi
          
      - name: 🎨 Check for Inline Styles
        run: |
          INLINE_STYLES=$(grep -c "style={" components/chat/ChatInterface.js || echo "0")
          
          echo "Found $INLINE_STYLES inline style occurrences"
          
          if [ $INLINE_STYLES -gt 5 ]; then
            echo "::warning::Too many inline styles ($INLINE_STYLES). Consider extracting to CSS modules."
          else
            echo "::notice::Inline styles count is acceptable ($INLINE_STYLES)"
          fi
          
      - name: 📦 Check Import Issues
        run: |
          # Vérifier l'import useTheme cassé
          if grep -q "useTheme.*hooks/useTheme" components/chat/ChatInterface.js; then
            echo "::error::Broken import detected: useTheme from hooks/useTheme"
            echo "::error::Should import from: contexts/ThemeContext"
            exit 1
          fi
          
          echo "::notice::No broken imports detected"

  # ==========================================
  # JOB 3: PERFORMANCE ANALYSIS
  # ==========================================
  performance-analysis:
    name: ⚡ Performance Analysis
    runs-on: ubuntu-latest
    needs: rabbit-analysis
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci
        
      - name: 📦 Bundle Size Analysis
        run: |
          # Analyser la taille du bundle
          npm run build 2>/dev/null || echo "Build command not found, skipping bundle analysis"
          
          # Si on a un build, analyser
          if [ -d ".next" ]; then
            npx @next/bundle-analyzer
          fi
          
      - name: 🔍 React Component Analysis
        run: |
          # Analyser les composants React pour les problèmes de performance
          npx react-scanner components/ --config .react-scanner.json || echo "React scanner not configured"
          
      - name: 📊 Generate Performance Report
        run: |
          echo "## ⚡ Performance Analysis" >> performance-report.md
          echo "### Bundle Size" >> performance-report.md
          echo "- Analyzing bundle composition and size..." >> performance-report.md
          echo "### React Components" >> performance-report.md
          echo "- Checking for memo usage and optimization opportunities..." >> performance-report.md
          
      - name: 📎 Upload Performance Report
        uses: actions/upload-artifact@v4
        with:
          name: performance-analysis
          path: performance-report.md

  # ==========================================
  # JOB 4: SECURITY SCAN
  # ==========================================
  security-scan:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔍 Run npm audit
        run: |
          npm audit --audit-level moderate || echo "Security vulnerabilities found"
          
      - name: 🛡️ Run Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/react

  # ==========================================
  # JOB 5: NOTIFICATION & SUMMARY
  # ==========================================
  notify-results:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [rabbit-analysis, chatinterface-specific-checks, performance-analysis, security-scan]
    if: always()
    
    steps:
      - name: 📊 Consolidate Results
        run: |
          echo "## 🎯 Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Rabbit Analysis**: ${{ needs.rabbit-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ChatInterface Checks**: ${{ needs.chatinterface-specific-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Analysis**: ${{ needs.performance-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          
      - name: 💬 Slack Notification
        if: failure() || needs.rabbit-analysis.outputs.severity-score > 7
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🚨 Code Quality Alert - Get Weez",
              "attachments": [
                {
                  "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": "🤖 Rabbit Code Review Results"
                      }
                    },
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*Repository:* ${{ github.repository }}"
                        },
                        {
                          "type": "mrkdwn", 
                          "text": "*Branch:* ${{ github.ref_name }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Severity:* ${{ needs.rabbit-analysis.outputs.severity-score }}/10"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Status:* ${{ needs.rabbit-analysis.outputs.analysis-result }}"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==========================================
  # JOB 6: CONDITIONAL DEPLOYMENT BLOCK
  # ==========================================
  deployment-gate:
    name: 🚦 Deployment Gate
    runs-on: ubuntu-latest
    needs: [rabbit-analysis, chatinterface-specific-checks]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 🚫 Block Deployment on Critical Issues
        run: |
          if [ "${{ needs.rabbit-analysis.outputs.severity-score }}" -gt "8" ]; then
            echo "::error::Deployment blocked due to critical code quality issues"
            echo "::error::Severity score: ${{ needs.rabbit-analysis.outputs.severity-score }}/10"
            echo "::error::Please fix critical issues before deploying to production"
            exit 1
          fi
          
          if [ "${{ needs.chatinterface-specific-checks.result }}" != "success" ]; then
            echo "::error::Deployment blocked due to ChatInterface specific issues"
            echo "::error::Please fix ChatInterface issues before deploying"
            exit 1
          fi
          
          echo "::notice::✅ All quality gates passed. Deployment approved."