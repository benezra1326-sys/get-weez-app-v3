// üß† TEST DE L'IA AM√âLIOR√âE
// Objectif : Tester que l'IA donne des r√©ponses directes et concr√®tes

import { askWeezAgent } from './lib/openai.js'

class ImprovedAITester {
  constructor() {
    this.testCases = [
      {
        message: "bonjour",
        expectedKeywords: ["Get Weez", "concierge", "Marbella", "villas", "restaurants", "clubs"],
        description: "Salutation simple"
      },
      {
        message: "je veux un restaurant ce soir",
        expectedKeywords: ["La Terraza del Mar", "Nobu Marbella", "ce soir", "r√©servation"],
        description: "Demande restaurant sp√©cifique"
      },
      {
        message: "ou aller a la plage demain pour 2",
        expectedKeywords: ["Nikki Beach", "Puente Romano Beach", "demain", "2 personnes"],
        description: "Demande plage avec contexte"
      },
      {
        message: "je veux un yacht pour une semaine",
        expectedKeywords: ["Princess 50", "Sunseeker 60", "semaine", "capitaine", "√©quipage"],
        description: "Demande yacht avec dur√©e"
      },
      {
        message: "villa pour un evg 10 personnes",
        expectedKeywords: ["Villa Marbella Club", "Villa Golden Mile", "EVG", "10 personnes"],
        description: "Demande villa EVG"
      },
      {
        message: "jet priv√©, yacht et villa pour 10 personnes",
        expectedKeywords: ["jet priv√©", "yacht", "villa", "10 personnes", "organise"],
        description: "Demande multiple complexe"
      }
    ]
  }

  // === TESTER UN CAS ===
  async testCase(testCase) {
    console.log(`\nüß™ Test: ${testCase.description}`)
    console.log(`üìù Message: "${testCase.message}"`)
    
    try {
      const response = await askWeezAgent(
        testCase.message,
        "Test User",
        true,
        []
      )
      
      console.log(`ü§ñ R√©ponse: "${response}"`)
      
      // V√©rifier les mots-cl√©s attendus
      const foundKeywords = testCase.expectedKeywords.filter(keyword => 
        response.toLowerCase().includes(keyword.toLowerCase())
      )
      
      const score = (foundKeywords.length / testCase.expectedKeywords.length) * 100
      
      console.log(`‚úÖ Mots-cl√©s trouv√©s: ${foundKeywords.length}/${testCase.expectedKeywords.length}`)
      console.log(`üìä Score: ${score.toFixed(1)}%`)
      
      // V√©rifier qu'il n'y a pas de questions g√©n√©riques
      const hasGenericQuestions = response.includes("qu'est-ce qui te tente") || 
                                 response.includes("que cherches-tu") ||
                                 response.includes("que puis-je faire")
      
      if (hasGenericQuestions) {
        console.log(`‚ö†Ô∏è  ATTENTION: Questions g√©n√©riques d√©tect√©es`)
        return { score: Math.max(0, score - 20), hasGenericQuestions: true }
      }
      
      return { score, hasGenericQuestions: false, response }
      
    } catch (error) {
      console.error(`‚ùå Erreur: ${error.message}`)
      return { score: 0, hasGenericQuestions: true, error: error.message }
    }
  }

  // === TESTER TOUS LES CAS ===
  async runAllTests() {
    console.log('üöÄ D√âMARRAGE DES TESTS IA AM√âLIOR√âE')
    console.log('='.repeat(60))
    
    const results = []
    let totalScore = 0
    let testsWithGenericQuestions = 0
    
    for (const testCase of this.testCases) {
      const result = await this.testCase(testCase)
      results.push({
        ...testCase,
        result
      })
      
      totalScore += result.score
      if (result.hasGenericQuestions) {
        testsWithGenericQuestions++
      }
    }
    
    // Calculer les statistiques
    const averageScore = totalScore / this.testCases.length
    const successRate = ((this.testCases.length - testsWithGenericQuestions) / this.testCases.length) * 100
    
    console.log('\nüìä R√âSULTATS FINAUX')
    console.log('='.repeat(40))
    console.log(`Tests effectu√©s: ${this.testCases.length}`)
    console.log(`Score moyen: ${averageScore.toFixed(1)}%`)
    console.log(`Tests sans questions g√©n√©riques: ${this.testCases.length - testsWithGenericQuestions}/${this.testCases.length}`)
    console.log(`Taux de r√©ussite: ${successRate.toFixed(1)}%`)
    
    if (averageScore >= 80 && successRate >= 80) {
      console.log('üéâ IA AM√âLIOR√âE AVEC SUCC√àS !')
      console.log('‚úÖ R√©ponses directes et concr√®tes')
      console.log('‚úÖ Plus de questions g√©n√©riques')
      console.log('‚úÖ Recommandations sp√©cifiques')
    } else {
      console.log('‚ö†Ô∏è  IA ENCORE √Ä AM√âLIORER')
      console.log('‚ùå Trop de questions g√©n√©riques')
      console.log('‚ùå R√©ponses pas assez concr√®tes')
    }
    
    return {
      averageScore,
      successRate,
      results,
      improved: averageScore >= 80 && successRate >= 80
    }
  }

  // === ANALYSER LES R√âPONSES ===
  analyzeResponses(results) {
    console.log('\nüîç ANALYSE D√âTAILL√âE')
    console.log('='.repeat(40))
    
    results.forEach((test, index) => {
      console.log(`\n${index + 1}. ${test.description}`)
      console.log(`   Score: ${test.result.score.toFixed(1)}%`)
      console.log(`   Questions g√©n√©riques: ${test.result.hasGenericQuestions ? 'OUI' : 'NON'}`)
      
      if (test.result.response) {
        const responseLength = test.result.response.length
        console.log(`   Longueur r√©ponse: ${responseLength} caract√®res`)
        
        if (responseLength < 50) {
          console.log(`   ‚ö†Ô∏è  R√©ponse trop courte`)
        } else if (responseLength > 500) {
          console.log(`   ‚ö†Ô∏è  R√©ponse trop longue`)
        } else {
          console.log(`   ‚úÖ Longueur appropri√©e`)
        }
      }
    })
  }
}

// === LANCEMENT DES TESTS ===
async function testImprovedAI() {
  const tester = new ImprovedAITester()
  const results = await tester.runAllTests()
  tester.analyzeResponses(results.results)
  
  return results
}

// === EXPORT ===
export { ImprovedAITester, testImprovedAI }

// === LANCEMENT SI EX√âCUT√â DIRECTEMENT ===
if (import.meta.url === `file://${process.argv[1]}`) {
  testImprovedAI()
    .then(results => {
      console.log('\nüèÅ Tests termin√©s !')
      process.exit(results.improved ? 0 : 1)
    })
    .catch(error => {
      console.error('‚ùå Erreur lors des tests:', error)
      process.exit(1)
    })
}
